- key: absolute_error
  en:
    term: absolute error
    def: >
      The absolute value of the difference between the observed and the correct
      value. Absolute error is usually less useful than [relative
      error](#relative_error).
  es:
    term: error absoluto
    def: >
      El valor absoluto de la diferencia entre el valor observado y el correcto.
      El error absoluto es normalmente menos útil que el [error relativo](#relative_error)

- key: absolute_path
  ref:
  - relative_path
  en:
    term: absolute path
    def: >
      A path that points to the same location in the [filesystem](#filesystem)
      regardless of where it is evaluated. An absolute path is the equivalent of
      latitude and longitude in geography.
  es:
    term: ruta absoluta
    def: >
      Una ruta apuntando a la misma ubicación en el [sistema de archivos](#filesystem)
      sin importar donde es evaluada. Una ruta absoluta es el equivalente a
      longitud y latitud en geografía.

- key: abstract_method
  en:
    term: abstract method
    def: >
      In [object-oriented programming](#oop), a [method](#method) that is
      defined but not implemented. Programmers will define an abstract method in
      a [parent class](#parent_class) to specify operations that [child
      classes](#child_class) must provide.
  es:
    term: método abstracto
    def: >
      En [programación orientada a objetos](#oop), un [método](#method) que se define
      pero no se implementa. Los programadores definirán un método abstracto en
      una [súper clase](#parent_class) para especificar operaciones que las
      [subclases](#child_class) deben proveer.

- key: abstract_syntax_tree
  en:
    term: abstract syntax tree
    def: >
      A deeply nested data structure, or [tree](#tree), that represents the
      structure of a program. For example, the AST might have a [node](#node)
      representing a `while` loop with one [child](#child_tree) representing the
      loop condition and another representing the [loop body](#loop_body).
    acronym: AST
  es:
    term: árbol de sintaxis abstracta
    def: >
      Una estructura de datos súper anidada, o [árbol](#tree), que representa
      la estructura de un programa

- key: accidental_complexity
  en:
    term: accidental complexity
    def: >
      The extra (avoidable) complexity introduced by poor design choices.
      The term is used in contrast with
      [intrinsic complexity](#intrinsic_complexity).
  es:
    term: complejidad accidental
    def: >
     La complejidad (inevitable) extra introducida por decisiones de diseño pobres.
     El término se usa en contraste con [complejidad intrínseca](#intrinsic_complexity).

- key: accumulator
  en:
    term: accumulator
    def: >
      A variable that collects and/or combines many values.  For example, if a
      program sums the values in an array by adding them all to a variable
      called `result`, then `result` is the accumulator.
  es:
    term: acumulador
    def: >
      Una variable que colecta y/o combina muchos valores. Por ejemplo, si un
      programa suma los valores de un arreglo, adicionándolos todos en una variable
      llamada `resultado`, entonces `resultado` es el acumulador.

- key: actual_result
  en:
    term: actual result (of test)
    def: >
      The value generated by running code in a test. If this matches the
      [expected result](#expected_result), the test [passes](#pass_test); if the
      two are different, the test [fails](#fail_test).
  es:
    term: resultado actual (de prueba)
    def: >
      El valor generado al ejecutar código en una prueba. Si coincide
      con el [valor esperado](#expected_result), la prueba [pasa](#pass_test);
      si difieren, la prueba [falla](#fail_test)

- key: adapter_pattern
  en:
    term: Adapter pattern
    def: >
      A [design pattern](#design_pattern) that rearranges parameters, provides
      extra values, or does other work so that one function can be called by
      another.
  es:
    term: patrón Adaptador
    def: >
      Un [patrón de diseño](#design_pattern) que re-acomoda parámetros, provee
      valores adicionales, o hace otras cosas para que una función pueda ser
      llamada por otra.

- key: alias
  en:
    term: alias
    def: >
      A second or subsequent reference to the same object. Aliases are useful,
      but increase the [cognitive load](#cognitive_load) on readers who have to
      remember that all these names refer to the same thing.
  es:
    term: alias
    def: >
      Una segunda referencia o subsecuente al mismo objeto. Los aliases son útiles,
      pero incrementan la [carga cognitiva](#cognitive_load) en lectores,
        quienes deben recordar todos los nombres que se refieren a la misma cosa.

- key: anonymous_function
  en:
    term: anonymous function
    def: >
      A function that has not been assigned a name. Anonymous functions are
      usually quite short, and are usually defined where they are used, e.g., as
      callbacks. In Python, these are called lambda functions and are
      created through use of the lambda reserved word.
  es:
    term: función anónima
    def: >
      Una función a la que no se le ha asignado un nombre. Las funciones anónimas
      son bastante cortas, y usualmente están son definidas donde se usan, e.g.,
      como retro-llamadas. En Python, estas son llamadas funciones lambda, y son
      creadas mediante la palabra reservada lambda.

- key: abi
  en:
    term: Application Binary Interface
    def: >
      The low-level layout that a piece of software must have to work on a
      particular kind of machine.
    acronym: ABI
  es:
    term: Interfaz binaria de aplicación
    def: >
      El plan de bajo nivel que una pieza de software debe tener para funcionar
      en un tipo específico de máquina.

- key: api
  en:
    term: Application Programming Interface
    def: >
      A set of functions provided by a software library or web service that
      other software can call.
    acronym: API
  es:
    term: Interfaz de programación de aplicación
    def: >
       Un conjunto de funciones provistas en una librería de software
       o servicio web que otro software puede llamar.

- key: argument
  ref:
  - parameter
  en:
    term: argument
    def: >
      A value passed to a function when it is called.
  es:
    term: argumento
    def: >
      Un valor pasado a una función cuando es llamada.

- key: ascii
  en:
    term: ASCII
    def: >
      A standard way to represent the characters commonly used in the Western
      European languages as 7- or 8-bit integers, now largely superceded by
      [Unicode](#unicode).
  break: true
  es:
    term: ASCII
    def: >
      Una forma estándar de presentar caracteres usada comúnmente en
      los lenguajes europeos occidentales como enteros de 7 u 8 bits,
      ahora reemplazado en su mayoría por [Unicode](#unicode).

- key: assembler
  ref:
  - disassembler
  en:
    term: assembler
    def: >
      A [compiler](#compiler) that translates software written in [assembly
      code](#assembly_code) into machine instructions.
  es:
    term: ensamblador
    def: >
      Un [compilador](#compiler) que traduce software escrito en [código ensamblador]
      (#assembly_code) en instrucciones máquina.

- key: assembly_code
  en:
    term: assembly code
    def: >
      A low-level programming language whose statements correspond closely to
      the actual [instruction set](#instruction_set) of a particular kind of
      processor.
  es:
    term: código ensamblado
    def: >
      Un lenguaje de programación a bajo nivel cuyas sentencias corresponden
      cercanamente al [set de instrucciones](#instruction_set) de un tipo
      específico de procesador.

- key: assertion
  en:
    term: assertion
    def: >
      A [Boolean](#boolean) expression that must be true at a certain point in a
      program. Assertions may be built into the language (e.g., Python's
      `assert` statement) or provided as functions (as with Node's `assert`
      library).
  es:
    term: aserción
    def: >
      Una expresión  [Booleana](#boolean)  que debe ser cierta en cierto punto
      de un programa. Las aserciones pueden estar en el lenguaje (e.g. la palabra
      `assert` de Python) o provistas como funciones (como la librería `assert`
      en Node)

- key: associative_array
  en:
    term: associative array
    def: >
      See [dictionary](#dictionary).
  es:
    term: arreglo asociativo
    def: >
      Ver [diccionario](#dictionary).

- key: asynchronous
  ref:
  - synchronous
  en:
    term: asynchronous
    def: >
      Not happening at the same time. In programming, an asynchronous operation
      is one that runs independently of another, or that starts at one time and
      ends at another.
  es:
    term: asíncrono
    def: >
      Que no ocurre al mismo tiempo. En programación, una operación asíncrona
      es la que ejecuta independiente de otra, o que inicia en un momento
      y termina en otro.

- key: attribute
  en:
    term: attribute
    def: >
      A name-value pair associated with an object, used to store metadata about
      the object such as an array's dimensions.
  es:
    term: atributo
    def: >
      Un par nombre-valor asociado con un objeto, usado para almacenar meta-datos
      sobre el objeto, como las dimensiones de un arreglo.

- key: automatic_variable
  ref:
  - makefile
  en:
    term: automatic variable
    def: >
      A variable that is automatically given a value in a [build
      rule](#build_rule). For example, Make automatically assigns the name of a
      rule's [target](#build_target) to the automatic variable `$@`. Automatic
      variables are frequently used when writing [pattern rules](#pattern_rule).
  es:
    term: variable automática
    def: >
      Una variable que recibe automáticamente un valor en una [regla de
      construcción](#build_rule). Por ejemplo, Make asigna automáticamente el nombre
      de un [objetivo](#build_target) de regla a la variable automática `$@`. Las
      variables automáticas son usadas frecuentemente al escribir [reglas de patrón]
      (#pattern_rule).

- key: backward_compatible
  en:
    term: backward-compatible
    def: >
      A property of a system that enables interoperability with an older legacy
      system, or with input designed for such a system.
  es:
    term: compatible en reversa
    def: >
      Una propiedad del sistema que permite interoperabilidad con un sistema
      más antiguo, o con la entrada diseñada para tal sistema.

- key: bare_object
  en:
    term: bare object
    def: >
      An object that isn't an instance of any particular class.
  es:
    term: objeto al descubierto
    def: >
      Un objeto que no es instancia de alguna clase en particular.

- key: base_class
  ref:
  - child_class
  - derived_class
  - parent_class
  en:
    term: base class
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which other
      classes are derived.
  es:
    term: clase base
    def: >
      En [programación orientada a objetos](#oop), una [clase](#class) desde la
      cual otras clases se derivan.

- key: binary
  en:
    term: binary
    def: >
      A system which can have one of two possible states, often represented as 0
      and 1 or true and false.
  es:
    term: binario
    def: >
      Un sistema que puede tener uno de dos estados posibles, a menudo representado
      como 0 y 1 o verdadero y falso.

- key: bit
  ref:
  - binary
  - boolean
  en:
    term: bit
    def: >
      A single binary digit (0 or 1).
  es:
    term: bit
    def: >
      Un solo dígito binario: 0 o 1.

- key: bitwise_operation
  en:
    term: bitwise operation
    def: >
      An operation that manipulates individual bits in memory. Common bitwise
      operations include `and`, `or`, `not`, and `xor`.
  es:
    term: operación bit a bit
    def: >
      Una operación que manipula bits individuales en memoria. Operaciones bit
      a bit comunes incluyen: `and`, `or`, `not`, y `xor`.

- key: block_comment
  en:
    term: block comment
    def: >
      A [comment](#comment) that spans multiple lines. Block comments may be
      marked with special start and end symbols, like `/*` and `*/` in C and its
      descendents, or each line may be prefixed with a marker like `#`.
  es:
    term: comentario en bloque
    def: >
      Un [comentario](#comment) que abarca varias líneas. Los comentarios en bloque
      pueden marcarse con símbolos especiales de inicio y fin, como `/*` and `*/` en C
      y sus descendientes, o cada línea inicia con un marcador como `#`.

- key: boolean
  en:
    term: Boolean
    def: >
      Relating to a variable or data type that can have either a logical value
      of true or false. Named for George Boole, a 19th century mathematician.
  es:
    term: Booleano
    def: >
      Relativo a una variable o tipo de dato que puede tener un valor lógico
      de verdadero o falso. Nombrado por George Boole, un matemático del s. XIX.

- key: breadth_first
  ref:
  - depth_first
  en:
    term: breadth first
    def: >
      To go through a nested data structure such as a [tree](#tree) by exploring
      all of one level, then going on to the next level and so on, or to explore
      a problem by examining the first step of each possible solution, and then
      trying the next step for each.
  es:
    term: anchura primero
    def: >
     Recorrer una estructura de datos anidad como un [árbol](#tree) explorando
     todo un nivel, luego bajando al siguiente y así en sucesivo, o explorar
     un problema examinando el primer paso de cada solución posible, intentando
     luego el siguiente paso de cada una.

- key: breakpoint
  ref:
  - watchpoint
  en:
    term: breakpoint
    def: >
      An instruction to a debugger telling it to suspend execution whenever a
      specific point in the program (such as a particular line) is reached.
  es:
    term: punto de ruptura
    def: >
      Una instrucción al depurador para indicar que suspenda la ejecución cuando
      se alcance un punto específico en el programa (una línea en particular).

- key: bug
  en:
    term: bug
    def: >
      A missing or undesirable [feature](#feature_software) of a piece of
      software.
  es:
    term: error
    def: >
      Una [característica](#feature_software) indeseable o faltante en una pieza
      de software.

- key: build_manager
  ref:
  - build_rule
  - dependency
  - makefile
  en:
    term: build manager
    def: >
      A program that keeps track of how files depend on one another and runs
      commands to update any files that are out-of-date. Build managers were
      invented to [compile](#compile) only those parts of programs that had
      changed, but are now often used to implement workflows in which plots
      depend on results files, which in turn depend on raw data files or
      configuration files.
  es:
    term: gestor de compilación
    def: >
      Un programa que determina como los archivos dependen entre sí y ejecuta
      comandos para actualizar los que están obsoletos. Los gestores de compilación
      se inventaron para [compilar](#compile) solo las partes de programas que
      cambiaban, pero a menudo ahora se usan para implementar flujos en los que los
      grafos dependen de los archivos de resultados, que a su vez dependen de
      archivos de datos crudos, o archivos de configuración.*

- key: build_recipe
  en:
    term: build recipe
    def: >
      The part of a [build rule](#build_rule) that describes how to update
      something that has fallen out-of-date.
  es:
    term: receta de compilación
    def: >
      La parte de una [regla de compilación](#build_rule) que describe cómo
      actualizar algo que ha quedado desactualizado.

- key: build_rule
  en:
    term: build rule
    def: >
      A specification for a [build manager](#build_manager) that describes how
      some files depend on others and what to do if those files are out-of-date.
  es:
    term: regla de construcción
    def: >
      Una especificación para un [gestor de compilación](#build_manager) que
      describe cómo algunos archivos dependen de otros y que hacer si esos
      archivos están desactualizados.

- key: build_target
  ref:
  - makefile
  en:
    term: build target
    def: >
      The file(s) that a [build rule](#build_rule) will update if they are
      out-of-date compared to their [dependencies](#dependency).
  es:
    term: objetivo de compilación
    def: >
      Los archivos que una [regla de compilación](#build_rule) actualizará
      si están desactualizados en comparación a sus [dependencias](#dependency).

- key: byte_code
  en:
    term: byte code
    def: >
      A set of instructions designed to be executed efficiently by an
      [interpreter](#interpreter).
  es:
    term: código intermedio
    def: >
      Un conjunto de instrucciones diseñanas para ejecutarse eficientemente
      por un [intérprete](#interpreter).

- key: cache
  en:
    term: cache
    def: >
      Something that stores copies of data so that future requests for it can be
      satisfied more quickly. The CPU in a computer uses a hardware cache to
      hold recently-accessed values; many programs rely on a software cache to
      reduce network traffic and latency. Figuring out when something in a cache
      is out-of-date and should be replaced is one of the [two hard problems in
      computer science](#two_hard_problems).
  es:
    term: caché
    def: >
      Algo que guarda copias de datos para que peticiones futuras de los mismos puedan
      servirse más rápido. El CPU en una computadora usa un caché de hardware para almacenar
      valores recién accedidos; muchos programas dependen en un caché para reducir
      la latencia y el tráfico de red. Identificar cuando algo en un caché está obsoleto
      y debe reemplazarse, es uno de los [dos problemas más difíciles en ciencias
      de la computación](#two_hard_problems).

- key: caching
  en:
    term: caching
    def: >
      To save a copy of some data in a local [cache](#cache) to make future
      access faster.
  es:
    term: caching
    def: >
      Guardar una copia de algún dato en un [caché](#cache) local para acelerar
      acceso futuro.

- key: call_stack
  en:
    term: call stack
    def: >
      A data structure that stores information about the active subroutines
      executed.
  es:
    term: pila de llamadas
    def: >
      Una estructura de datos que almacena información sobre sub-rutinas activas
      ya ejecutadas.

- key: callback
  en:
    term: callback function
    def: >
      A function A that is passed to another function B so that B can call it at
      some later point. Callbacks can be used [synchronously](#synchronous), as
      in generic functions like `map` that invoke a callback function once for
      each element in a collection, or [asynchronously](#asynchronous), as in a
      [client](#client) that runs a callback when a [response](#http_response)
      is received in answer to a [request](#http_request).
  es:
    term: función retro-llamada
    def: >
      Una función A que se pasa a otra función B para que B pueda llamarla en algún
      momento posterior.
      Las retro-llamadas pueden usarse de forma [síncrona](#synchronous), como en funciones
      genéricas como `map` que invocan una función retro-llamada una vez para cada elemento 
      de la colección, o de forma [asíncrona](#asynchronous), como en un [cliente](#client)
      que ejecuta una retro-llamada cuando una [respuesta](#http_response) es recibida en 
      respuesta a una [petición](#http_request).

- key: css
  en:
    term: Cascading Style Sheets
    def: >
      A way to control the appearance of HTML. CSS is typically used to specify
      fonts, colors, and layout.
    acronym: CSS
  es:
    term: Hojas de estilo en cascada
    def: >
      Una forma de controlar la apariencia de HTML. CSS se usa típicamente para especificar
      diseño, colores y fuentes

- key: catch_exception
  en:
    term: catch (an exception)
    def: >
      To handle an error or other unexpected event represented by an
      [exception](#exception).
  es:
    term: atrapar (una excepción)
    def: >
      Manejar un error u otro evento inesperado representado por una [excepción](#exception).


- key: chain_of_responsibility_pattern
  en:
    term: Chain of Responsibility pattern
    def: >
      A [design pattern](#design_pattern) in which each [object](#object) either
      handles a request or passes it on to another object.
  es:
    term: patrón de cadena de responsabilidad
    def: >
      Un [patrón de diseño](#design_pattern) en el que cada [objeto](#object)  
      o gestiona una petición o la pasa a otro objeto.

- key: character_encoding
  en:
    term: character encoding
    def: >
      A specification of how characters are stored as bytes. The most
      commonly-used encoding today is [UTF-8](#utf_8).
  es:
    term: codificado de caracteres
    def: >
      Una especificación de cómo se almacenan en bytes los caracteres.

- key: child_tree
  en:
    term: child (in a tree)
    def: >
      A [node](#node) in a [tree](#tree) that is below another node (called the
      [parent](#parent_tree)).
  es:
    term: child (in a tree)
    def: >
      Un [nodo](#node) en un [árbol](#tree) que está debajo de otro nodo 
      (llamado [padre](#parent_tree)).

- key: child_class
  en:
    term: child class
    def: >
      In [object-oriented programming](#oop), a [class](#class) derived from
      another class (called the [parent class](#parent_class)).
  break: true
  es:
    term: clase hija
    def: >
      En [programación orientada a objetos](#oop), una [clase](#class)  derivada de otra
      clase (llamada la [clase padre](#parent_class)).

- key: circular_dependency
  en:
    term: circular dependency
    def: >
      A situation in which X depends on Y and Y depends on X, either directly or
      indirectly. If there is a circular dependency, then the [dependency
      graph](#dependency_graph) is not [acyclic](#dag).
  es:
    term: dependencia circular
    def: >
      Una situación en la que X depende de Y e Y depende de X, ya sea directa o
      indirectamente. Si hay una dependencia circular, entonces el [grafo de
      dependencias](#dependency_graph) no es [acíclica](#dag).

- key: class
  en:
    term: class
    def: >
      In [object-oriented programming](#oop), a structure that combines data and
      operations (called [methods](#method)). The program then uses a
      [constructor](#constructor) to create an [object](#object) with those
      properties and methods. Programmers generally put generic or reusable
      behavior in [parent classes](#parent_class), and more detailed or specific
      behavior in [child classes](#child_class).
  es:
    term: clase
    def: >
      En [programación orientada a objetos](#oop), una estructura que combina datos y
      operaciones (llamados [métodos](#method)). El programa usa entonces un 
      [constructor](#constructor) para crear un [objeto](#object) con aquellas
      propiedades y métodos. Los programadores generalmente ponen comportamiento genérico
      o reusable en las [clases padre](#parent_class), y más detallado o específico
      en las [clases hijas](#child_class).

- key: client
  en:
    term: client
    def: >
      A program such as a web browser that gets data from a [server](#server)
      and displays it to, or interacts with, users. The term is used more
      generally to refer to any program A that makes requests of another program
      B. A single program can be both a client and a server.
  es:
    term: cliente
    def: >
      Un programa como un navegador web que recibe datos de un [servidor](#server)
      y lo despliega o interactúa con usuarios. El término se usa más
      generalmente para referirse a cualquier programa A que hace peticiones
      a un programa B. Un solo programa puede ser cliente y servidor.

- key: closure
  en:
    term: closure
    def: >
      A set of variables defined in the same [scope](#scope) whose existence has
      been preserved after that scope has ended.
  es:
    term: clausura
    def: >
      Un conjunto de variables definidas en el mismo [ámbito](#scope) cuya existencia
      ha sido preservada tras el cierre del ámbito.

- key: code_coverage
  en:
    term: code coverage (in testing)
    def: >
      How much of a [library](#library) or program is executed when tests run.
      This is normally reported as a percentage of lines of code.
  es:
    term: cobertura de código
    def: >
      La cantidad de un programa o [librería](#library) que se ejecuta cuando
      se corren pruebas. Esto es reportado normalmente como un porcentaje de líneas
      de código.

- key: cognitive_load
  en:
    term: cognitive load
    def: >
      The amount of working memory needed to accomplish a set of simultaneous
      tasks.
  es:
    term: carga cognitiva
    def: >
      La cantidad de memoria en uso necesaria para completar un conjunto de 
      tareas simultáneas.

- key: collision
  en:
    term: collision
    def: >
      A situation in which a program tries to store two items in the same
      location in memory. For example, a collision occurs when a [hash
      function](#hash_function) generates the same [hash code](#hash_code) for
      two different items.
  es:
    term: colisión
    def: >
      Una situación en la que un programa intenta almacenar dos ítems en la misma ubicación
      de memoria. Por ejemplo, una colisión ocurre cuando una [función hash](#hash_function) 
      genera el mismo [código hash](#hash_code) para dos ítems distintos. 

- key: column_major
  ref:
  - row_major
  en:
    term: column-major storage
    def: >
      Storing each column of a two-dimensional array as one block of memory so
      that elements in the same row are far apart.
  es:
    term: almacenamiento en columna mayor
    def: >
      Almacenar cada columna de un arreglo bidimensional como un bloque de memoria
      para que los elementos en la misma hilera estén separados.


- key: combinatorial_explosion
  en:
    term: combinatorial explosion
    def: >
      The exponential growth in the size of a problem or the time required to
      solve it that arises when all possible combinations of a set of items must
      be searched.
  es:
    term: explosión combinatoria
    def: >
      El crecimiento exponencial en el tamaño de un problema, o el tiempo requerido
      para resolverlo se eleva cuando todas las posibles combinaciones de un conjunto
      de ítems que deben buscarse.

- key: csv
  en:
    term: comma-separated values
    def: >
      A text format for tabular data in which each [record](#record) is one row
      and [fields](#field) are separated by commas. There are many minor
      variations, particularly around quoting of [strings](#string).
    acronym: CSV
  es:
    term: valores separados por comas
    def: >
      Un formato de texto para datos tabulares en donde cada [registro](#record) es una 
      hilera y los [campos](#field) están separados por comas. Hay muchas variaciones 
      menores, en especial sobre en comillado de [cadenas](#string).


- key: command_line_argument
  en:
    term: command-line argument
    def: >
      A filename or control flag given to a command-line program when it is run.
  es:
    term: argumento de línea de comandos
    def: >
      Una bandera de control o nombre de archivo dado a un programa en la línea de 
      comandos cuando se ejecuta.

- key: cli
  en:
    term: command-line interface
    def: >
      A user interface that relies solely on text for commands and output,
      typically running in a [shell](#shell).
    acronym: CLI
  es:
    term: interfaz de línea de comandos
    def: >
      Una interfaz de usuario que se basa solamente en texto para los comandos 
      y salida, corriendo típicamente en un [shell](#shell).

- key: comment
  en:
    term: comment
    def: >
      Text written in a script that is not treated as code to be run, but rather
      as text that describes what the code is doing. These are usually short
      notes, often beginning with a `#` (in many programming languages).
  es:
    term: comentario
    def: >
      Texto escrito en un script que no se trata como código a correr, sino como texto
      que describe lo que el código hace. Estos son usualmente notas cortas, a menudo
      iniciando con un `#` (en muchos lenguajes de programación).

- key: compile
  en:
    term: compile
    def: >
      To translate textual source into another form. Programs in [compiled
      languages](#compiled_language) are translated into machine instructions
      for a computer to run, and [Markdown](#markdown) is usually translated
      into [HTML](#html) for display.
  es:
    term: compilar
    def: >
      Traducir una fuente textual en otra forma. Los programas en [lenguajes 
      compilados](#compiled_language) son traducidos a instrucciones máquina para que
      los ejecute una computadora, [Markdown](#markdown) usualmente se traduce a
      [HTML](#html) para desplegarse.

- key: compiled_language
  en:
    term: compiled language
    def: >
      Originally, a language such as C or Fortran that is translated into
      machine instructions for execution. Languages such as Java are also
      compiled before execution, but into [byte code](#byte_code) instead of
      machine instructions, while [interpreted languages](#interpreted_language)
      like JavaScript are compiled to byte code on the fly.
  break: true
  es:
    term: lenguaje compilado
    def: >
      Originalmente, un lenguaje como C o Fortran que es traducido en instrucciones máquina
      para ejecutar. Los lenguajes como Java también son compilados antes de ejecutarse,
      pero en [código intermedio](#byte_code) en lugar de instrucciones máquina, mientras 
      que los [lenguajes interpretados](#interpreted_language) como Javascript se compilan 
      a código byte, pero al vuelo.

- key: compiler
  en:
    term: compiler
    def: >
      An application that translates programs written in some languages into
      machine instructions or [byte code](#byte_code).
  es:
    term: compilador
    def: >
      Una aplicación que traduce programas escritos en algunos lenguajes hacia instrucciones
      máquina ó [código intermedio ](#byte_code).


- key: confirmation_bias
  en:
    term: confirmation bias
    def: >
      The tendency for someone to look for evidence that they are right rather
      than searching for reasons why they might be wrong.
  es:
    term: sesgo de confirmación
    def: >
      La tendencia de alguien a buscar evidencia que les respalde, en lugar de buscar razones
      por las cuales puedan estar equivocados.

- key: console
  en:
    term: console
    def: >
      A computer terminal where a user may enter commands, or a program, such as
      a shell that simulates such a device.
  es:
    term: consola
    def: >
      Una terminal de computadora donde un usuario puede ingresar comandos, o un programa,
      como un shell que simula esos dispositivos.

- key: constructor
  en:
    term: constructor
    def: >
      A function that creates an [object](#object) of a particular
      [class](#class).
  es:
    term: constructor
    def: >
      Una función que crea un [objeto](#object) de una clase particular.

- key: utc
  en:
    term: Coordinated Universal Time
    def: >
      The standard time against which all others are defined. UTC is the time at
      longitude 0°, and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.
    acronym: UTC
  es:
    term: Hora Universal Coordinada
    def: >
      La hora estándar con la cual todas las otras se definen. UTC es la hora en la
      longitud 0°, y no se ajusta al horario de verano.
      [Las marcas de tiempo](#timestamp) a menudo se reportan en UTC para que sean 
      las mismas sin importar la zona horaria en que se encuentre una computadora.

- key: corner_case
  en:
    term: corner case
    def: >
      Another name for an [edge case](#edge_case).
  es:
    term: caso esquina
    def: >
      Otro nombre para [caso extremo](#edge_case).

- key: coupling
  en:
    term: coupling
    def: >
      The degree of interaction between two [classes](#class),
      [modules](#module), or other software components. If a system's components
      are [loosely coupled](#loosely_coupled), changes to one are unlikely to
      affect others.  If they are [tightly coupled](#tightly_coupled), then any
      change requires other changes elsewhere, which complicates maintenance and
      evolution.
  es:
    term: acoplamiento
    def: >
      El grado de interacción entre dos [clases](#class),[módulos](#module)
      u otros componentes de software. Si los componentes de un sistema
      están [ligeramente acoplados](#loosely_coupled), los cambios a uno
      afectarán poco a los otros. Si están [fuertemente acoplados](#tightly_coupled),
      entonces cualquier cambio requiere propagar cambios, lo que complica tanto
      el mantenimiento como la evolución.


- key: cryptographic_hash_function
  en:
    term: cryptographic hash function
    def: >
      A [hash function](#hash_function) that produces an apparently-random value
      for any input.
  es:
    term: función hash criptográfica
    def: >
      Una [función hash](#hash_function) que produce un valor aparentemente
      aleatorio para cualquier entrada.

- key: current_working_directory
  en:
    term: current working directory
    def: >
      The [folder](#folder) or [directory](#directory) location in which the
      program operates. Any action taken by the program occurs relative to this
      directory.
  es:
    term: directorio de trabajo actual
    def: >
      La [carpeta](#folder) o ubicación de directorio(#directory) en la que
      el programa opera. Cualquier acción que realice el programa ocurre relativa
      a este directorio.

- key: cycle
  en:
    term: cycle (in a graph)
    def: >
      A set of links in a graph that leads from a node back to itself.
  es:
    term: ciclo (en un grafo)
    def: >
      Un conjunto de enlaces en un grafo que lleva de un nodo de vuelta a sí mismo.

- key: data_frame
  en:
    term: data frame
    def: >
      A two-dimensional data structure for storing tabular data in memory. Rows
      represent [records](#record) and columns represent [fields](#field).
  es:
    term: marco de datos
    def: >
      Una estructura de datos bi-dimensional para almacenar datos tabulares
      en memoria. Las hileras representan [registros](#record), y las columnas
      representan [campos](#field)


- key: data_migration
  en:
    term: data migration
    def: >
      Moving data from one location or format to another. The term refers to
      translating data from an old format to a newer one.
  es:
    term: migración de datos
    def: >
      Mover datos de una ubicación a otra o de un formato a otro. El término se
      refiere a trasladar datos de un formato antiguo a uno más nuevo.

- key: decorator_pattern
  en:
    term: Decorator pattern
    def: >
      A [design pattern](#design_pattern) in which a function adds additional
      features to another function or a [class](#class) after its initial
      definition. Decorators are a feature of Python and can be
      implemented in most other languages as well.
  es:
    term: patrón Decorador
    def: >
      Un [patrón de diseño](#design_pattern) en el cual una función agrega 
      características a otra función o [clase](#class) luego de su definición
      inicial. Los decoradores son una característica de Python y pueden
      implementarse en muchos otros lenguajes también.

- key: defensive_programming
  en:
    term: defensive programming
    def: >
      A set of programming practices that assumes mistakes will happen and
      either reports or corrects them, such as inserting
      [assertions](#assertion) to report situations that are not ever supposed
      to occur.
  es:
    term: programación defensiva
    def: >
      Un conjunto de prácticas de programación que asume que los errores ocurrirán
      y los reporta o los corrige, como insertar [aserciones](#assertion) para 
      reportar situaciones que no se supone debieran ocurrir.


- key: dependency
  en:
    term: dependency
    def: >
      See [prerequisite](#prerequisite).
  es:
    term: dependencia
    def: >
      Ver [pre-requisito](#prerequisite).

- key: dependency_graph
  en:
    term: dependency graph
    def: >
      A [directed graph](#directed_graph) showing how things depend on one
      another, such as the files to be updated by a [build
      manager](#build_manager). If the dependency graph is not [acyclic](#dag),
      the dependencies cannot be resolved.
  break: true
  es:
    term: grafo de dependencias
    def: >
      Un [grafo dirigido](#directed_graph) que muestra como las cosas dependen
      entre sí, como los archivos a actualizar por un [gestor 
      de compilación](#build_manager). Si el grafo de dependencias no es 
      [acíclico](#dag), entonces las dependencias no se pueden resolver. 

- key: deprecation
  en:
    term: deprecation
    def: >
      To indicate that while a function, method, or class exists, its use is no
      longer recommended (for example, because it is going to be phased out in a
      future release).
  es:
    term: deprecación
    def: >
      Usado para indicar que mientras una función, método o clase existen, su uso
      no se recomienda más (por ejemplo, porque va a desfasarse pronto).

- key: depth_first
  en:
    term: depth-first
    def: >
      A search algorithm that explores one possibility all the way to its
      conclusion before moving on to the next.
  es:
    term: búsqueda en profundidad

    def: >
      Un algoritmo de búsqueda que explora una posibilidad hasta el nodo final, 
      antes de moverse a la siguiente.

- key: derived_class
  ref:
  - child_class
  en:
    term: derived class
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).
  es:
    term: clase derivada
    def: >
      En [programación orientada a objetos](#oop), una clase que extiende directa 
      o indirectamente una [clase base](#base_class).

- key: design_by_contract
  ref:
  - liskov_substitution_principle
  en:
    term: design by contract
    def: >
      A style of designing software in which functions specify the
      [pre-conditions](#pre_condition) that must be true in order for them to
      run and the [post-conditions](#post_condition) they guarantee will be true
      when they return. A function can then be replaced by one with weaker
      pre-conditions (i.e., it accepts a wider set of input) and/or stronger
      post-conditions (i.e., it produces a smaller range of output) without
      breaking anything else.
  es:
    term: diseño por contrato
    def: >
      Un estilo de diseño de software en el que las funciones especifican
      las [pre-condiciones](#pre_condition) que deben ser ciertas para que
      se ejecuten y las [pos-condiciones](#post_condition) que garanticen ser 
      verdaderas cuando terminen. Una función puede ser reemplazada por otra
      con pre-condiciones más relajadas (i.e., acepta un rango más amplio de
      argumentos) y/o pos-condiciones más estrictas (i.e., produce un rango
      de salidas más reducido) sin romper nada más.

- key: design_pattern
  ref:
  - iterator_pattern
  - singleton_pattern
  - template_method_pattern
  - visitor_pattern
  en:
    term: design pattern
    def: >
      A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be
      provided by a [library](#library).
  es:
    term: patrón de diseño
    def: >
      Un patrón recurrente en diseño de software que es lo suficientemente específico
      para ser nombrado, pero no tanto como para que una sola implementación
      se incluya en una [librería](#library).

- key: destructuring_assignment
  en:
    term: destructuring assignment
    def: >
      Unpacking values from data structures and assigning them to multiple
      variables in a single statement.
  es:
    term: asignación en paralelo
    def: >
      Desempacar valores desde estructuras de datos y asignarlas a múltiples
      variables en una sola sentencia.

- key: dictionary
  en:
    term: dictionary
    def: >
      A data structure that allows items to be looked up by value, sometimes
      called an [associative array](#associative_array). Dictionaries are often
      implemented using [hash tables](#hash_table).
  es:
    term: diccionario
    def: >
      Una estructura de datos que  permite buscar ítems por valor, a veces
      llamado [arreglo asociativo](#associative_array). Los diccionarios a menudo
      se implementan usando [tablas hash](#hash_table).

- key: dag
  en:
    term: directed acyclic graph
    def: >
      A [directed graph](#directed_graph) which does not contain any loops
      (i.e., it is not possible to reach a [node](#node) from itself by
      following edges).
    acronym: DAG
  es:
    term: grafo acíclico dirigido
    def: >
      Un [grafo dirigido](#directed_graph)  que no contiene ciclos (i.e., no es
      posible alcanzar un [nodo](#node) desde sí mismo siguiendo sus aristas.

- key: directed_graph
  en:
    term: directed graph
    def: >
      A [graph](#graph) whose [edges](#edge) have directions.
  es:
    term: grafo dirigido
    def: >
      Un [grafo](#graph) cuyos [aristas](#edge) tienen direcciones.

- key: directory
  en:
    term: directory
    def: >
      A structure in a [filesystem](#filesystem) that contains references to
      other structures, such as files and other directories.
  es:
    term: directorio
    def: >
      Una estructura en un [sistema de archivos](#filesystem) que contiene 
      referencias a otras estructuras, como archivos y otros directorios.

- key: disassembler
  ref:
  - assembler
  en:
    term: disassembler
    def: >
      A program that translates machine instructions into [assembly
      code](#assembly_code) or some other higher-level language.
  es:
    term: desensamblador
    def: >
      Un programa que traduce instrucciones máquina en [código 
      ensamblador](#assembly_code) o algún otro lenguaje de alto nivel.

- key: doc_comment
  en:
    term: doc comment
    def: >
      A documentation comment ("doc comment" for short) is a specially-formatted
      comment containing documentation about a piece of code that is embedded in
      the code itself.
  es:
    term: comentario de documentación
    def: >
      Un comentario de documentación (abreviado  "doc comment") es un comentario con 
      formato especial que contiene documentación sobre una pieza de código embebida
      en el código mismo.

- key: dom
  en:
    term: Document Object Model
    def: >
      A standard, in-memory representation of [HTML](#html) and [XML](#xml).
      Each [element](#element) is stored as a [node](#node) in a [tree](#tree)
      with a set of named [attributes](#attribute); contained elements are
      [child nodes](#child_tree).
    acronym: DOM
  es:
    term: Document Object Model
    def: >
      Una representación estándar en memoria de [HTML](#html) y  [XML](#xml).
      Cada [elemento](#element) se almacena como un [nodo](#node) en un [árbol](#tree)
      con un conjunto de [atributos](#attribute) nominales; los elementos contenidos
      son [nodos hijo](#child_tree).

- key: driver
  en:
    term: driver
    def: >
      A program that runs other programs, or a function that drives all of the
      other functions in a program.
  es:
    term: controlador
    def: >
      Un programa que ejecuta otros programas, o una función que dirige otras
      funciones en un programa.

- key: dynamic_loading
  en:
    term: dynamic loading
    def: >
      To [import](#import) a [module](#module) into the memory of a program
      while it is already running. Most [interpreted
      languages](#interpreted_language) use dynamic loading, and provide tools
      so that programs can find and load modules dynamically to configure
      themselves.
  break: true
  es:
    term: carga dinámica
    def: >
      [Importar](#import) un [módulo](#module) en la memoria de un programa mientras
      está ejecutándose. Casi todos los [lenguages interpretados](#interpreted_language)
      usan carga dinámica, y vienen con herramientas para que los programas puedan
      encontrar y cargar dinámicamente los módulos para configurarse a sí mismos.

- key: dynamic_lookup
  en:
    term: dynamic lookup
    def: >
      To find a function or a property of an [object](#object) by name while a
      program is running. For example, instead of getting a specific property of
      an object using `obj.name`, a program might use `obj[someVariable]`, where
      `someVariable` could hold `"name"` or some other property name.
  es:
    term: búsqueda dinámica
    def: >
      Encontrar una función o propiedad de un [objeto](#object) por su nombre mientras
      un programa está ejecutándose. Por ejemplo, en lugar de obtener una propiedad
      específica de un objeto usando `obj.name`, un programa puede usar `obj[someVariable]`,
      donde `someVariable` podría contener `"name"`, o alguna otro nombre de propiedad.

- key: dynamic_scoping
  en:
    term: dynamic scoping
    def: >
      To find the value of a variable by looking at what is on the [call
      stack](#call_stack) at the moment the lookup is done. Almost all
      programming languages use [lexical-scoping](#lexical_scoping) instead,
      since it is more predictable.
  es:
    term: ámbito dinámico
    def: >
      Para encontrar el valor de una variable buscando lo que hay en la [pila de
      llamadas](#call_stack) al momento de hacer la búsqueda. Casi todos los lenguajes
      de programación usan [ámbito léxico](#lexical_scoping) en su lugar, ya que es
      más predecible.

- key: eager_matching
  en:
    term: eager matching
    def: >
      Matching as much as possible, as early as possible.
  es:
    term: empate impaciente
    def: >
      Empatar tanto como sea posible, tan pronto como sea posible.

- key: easy_mode
  en:
    term: easy mode
    def: >
      A term borrowed from gaming meaning to do something with obstacles or
      difficulties simplified or removed, often for practice purposes.
  es:
    term: modo fácil
    def: >
      Un término prestado de los juegos que significa hacer algo con obstáculos
      o dificultades más simplificado, a menudo con fines de practicar.

- key: edge
  en:
    term: edge
    def: >
      A connection between two [nodes](#node) in a [graph](#graph). An edge may
      have data associated with it, such as a name or distance.
  es:
    term: arista
    def: >
      Una conexión entre dos [nodos](#node) en un [grafo](#graph). Una arista
      puede estar asociada con datos, como nombre o distancia.

- key: edge_case
  en:
    term: edge case
    def: >
      A problem that only comes up under unusual circumstances or when a system
      is pushed to its limits; also sometimes called a [corner
      case](#corner_case). Programs intended for widespread use have to handle
      edge cases, but doing so can make them much more complicated.
  es:
    term: caso extremo
    def: >
      Un problema que solo aparece bajo circunstancias inusuales o cuando un sistema
      es llevado a sus límites; llamado también [caso esquinado](#corner_case). Los
      programas que se usarán ampliamente tiene que manejar estos casos,  pero hacerlo
      así puede hacerlos mucho más complicados.

- key: element
  en:
    term: element
    def: >
      A named component in an [HTML](#html) or [XML](#xml) document. Elements
      are usually written `<name>`…`</name>`, where "…" represents the
      content of the element. Elements often have [attributes](#attribute).
  es:
    term: elemento
    def: >
      Un componente nombrado en un documento [HTML](#html) o [XML](#xml).Los
      elementos se escriben usualmente `<name>`…`</name>`, donde "…" representa
      el contenido del elemento. Los elementos a menudo tienen [atributos](#attribute).

- key: encapsulate
  en:
    term: encapsulate
    def: >
      To store data inside some kind of structure so that it is only accessible
      through that structure.
  es:
    term: encapsular
    def: >
      Almacenar datos dentro de algún tipo de estructura para que sea accesible
      mediante la misma.

- key: entry_point
  en:
    term: entry point
    def: >
      Where a program begins executing.
  es:
    term: punto de entrada
    def: >
      Donde inicia la ejecución de un programa

- key: environment
  en:
    term: environment
    def: >
      A structure that stores a set of variable names and the values they refer
      to.
  es:
    term: ambiente
    def: >
      La estructura que alberga un conjunto de nombres de variables y los valores
      a los que se refieren.

- key: error_test
  en:
    term: error (in a test)
    def: >
      Signalled when something goes wrong in a [unit test](#unit_test) itself
      rather than in the system being tested. In this case, we do not know
      anything about the correctness of the system.
  es:
    term: error (en una prueba)
    def: >
      Señal cuando algo falla en una [prueba unitaria](#unit_test) más que en
      el sistema bajo prueba. En este caso, no sabemos algo sobre si el sistema
      es correcto.

- key: error_handling
  en:
    term: error handling
    def: >
      What a program does to detect and correct for errors. Examples include
      printing a message and using a default configuration if the user-specified
      configuration cannot be found.
  es:
    term: manejo de error
    def: >
      Lo que hace un programa para detectar y corregir errores. Ejemplos incluyen
      imprimir un mensaje y usar una configuración por defecto si la especificada
      por el usuario no puede encontrarse.

- key: event_loop
  en:
    term: event loop
    def: >
      A mechanism for managing concurrent activities in a program. Tasks are
      represented as items in a queue; the event loop repeatedly takes an item
      from the front of the queue and runs it, adding any other tasks it
      generates to the back of the queue to run later.
  es:
    term: ciclo de eventos
    def: >
      Un mecanismo para manejar actividades concurrentes en un programa. Las tareas
      son representadas como ítems en un cola; el ciclo de eventos toma repetidamente
      un ítem del frente de la cola y lo ejecuta, agregando otras tareas que genera 
      al final de la cola para ejecutar después.

- key: exception
  en:
    term: exception
    def: >
      An object that stores information about an error or other unusual event in
      a program. One part of a program will create and [raise an
      exception](#raise_exception) to signal that something unexpected has
      happened; another part will [catch](#catch_exception) it.
  break: true
  es:
    term: excepción
    def: >
      Un objeto que almacena información sobre un error u otro evento inusual 
      en un programa. Una parte de un programa creará y [generará una 
      excepción](#raise_exception) para señalar que algo inesperado ha ocurrido.


- key: exception_handler
  en:
    term: exception handler
    def: >
      A piece of code that deals with an [exception](#exception) after it is
      [caught](#catch_exception), e.g., by recording a message, retrying the
      operation that failed, or performing an alternate operation.
  es:
    term: manejo de excepciones
    def: >
      Una pieza de código que maneja una [excepción](#exception) luego de ser
      [atrapada](#catch_exception), e.g., registrando un mensaje, intentando de
      nuevo la operación fallida, o realizando una operación alternativa.

- key: expected_result
  ref:
  - actual_result
  en:
    term: expected result (of test)
    def: >
      The value that a piece of software is supposed to produce when tested in a
      certain way, or the state in which it is supposed to leave the system.
  es:
    term: resultado esperado (de una prueba)
    def: >
      El valor de un fragmento de software que se espera cuando se prueba de 
      cierto modo, o el estado en el cual se supone que deje el sistema.

- key: exploratory_programming
  en:
    term: exploratory programming
    def: >
      A software development methodology in which requirements emerge or change
      as the software is being written, often in response to results from early
      runs.
  es:
    term: programación exploratoria
    def: >
      Una metodología de desarrollo de software en la que los requerimientos
      emergen  o cambian conforme el software es escrito, a menudo en respuesta
      a los resultados de ejecuciones previas.

- key: export
  en:
    term: export
    def: >
      To make something visible outside a [module](#module) so that other parts
      of a program can [import](#import) it. In most languages a module must
      export things explicitly in an attempt to avoid [name
      collision](#name_collision).
  es:
    term: exportar
    def: >
      Hacer algo visible fuera de un [módulo](#module) para que otras partes de
      un programa pueda [importarlo](#import). En casi todos los lenguajes un 
      módulo debe exportar cosas explícitamente en un intento por evitar la 
      [colisión de nombres](#name_collision).


- key: fail_test
  ref:
  - pass_test
  en:
    term: fail (a test)
    def: >
      A test fails if the [actual result](#actual_result) does not match the
      [expected result](#expected_result).
  es:
    term: falla (de prueba)
    def: >
      Una prueba falla si el [resultado actual](#actual_result) no concuerda
      con el [resultado esperado](#expected_result).

- key: feature_software
  en:
    term: feature (in software)
    def: >
      Some aspect of software that was deliberately designed or built. A
      [bug](#bug) is an undesired feature.
  es:
    term: característica (del software)
    def: >
      Un aspecto del software que fue expresamente diseñado o construido. 
      Un [error](#bug) es una característica indeseada.

- key: field
  en:
    term: field
    def: >
      A component of a [record](#record) containing a single value. Every record
      in a database [table](#table) has the same fields.
  es:
    term: campo
    def: >
      Un componente de un [registro](#record) conteniendo un solo valor. 
      Cada registro en una [tabla](#table) de base de datos tiene los mismos campos.

- key: filename_extension
  en:
    term: filename extension
    def: >
      The last part of a filename, usually following the '.' symbol. Filename
      extensions are commonly used to indicate the type of content in the file,
      though there is no guarantee that this is correct.
  es:
    term: extensión de archivo
    def: >
      La última parte de un nombre de archivo, usualmente tras el ".". Las
      extensiones de archivo se usan comúnmente para indicar el tipo de 
      contenido en el archivo, aunque no garantiza que este sea correcto.

- key: filesystem
  en:
    term: filesystem
    def: >
      The part of the [operating system](#operating_system) that manages how
      files are stored and retrieved. Also used to refer to all of those files
      and [directories](#directory) or the specific way they are stored (as in
      "the Unix filesystem").
  es:
    term: sistema de archivos
    def: >
      La parte del [sistema operativo](#operating_system) que gestiona la
      manera en que los archivos son almacenados y recuperados. También se
      usa para referirse a todos los archivos y [directorios](#directory)
      o la forma en que son almacenados (como en "el sistema de archivos Unix").

- key: filter
  en:
    term: filter
    def: >
      As a verb, to choose a set of [records](#record) (i.e., rows of a table)
      based on the values they contain. As a noun, a command-line program that
      reads lines of text from files or [standard input](#stdin), performs some
      operation on them (such as filtering), and writes to a file or
      [stdout](#stdout).
  es:
    term: filtro
    def: >
      Como verbo, elegir un valor de [registros](#record) (i.e., hileras
      de una tabla) basado en los valores que contienen. Como sustantivo, un
      programa de línea de comandos que lee líneas de texto de archivos, o 
      [entrada estándar](#stdin), realiza alguna operación (como filtrar), y
      escribe a un archivo o [salida estándar](#stdout).

- key: fsm
  en:
    term: finite state machine
    def: >
      A theoretical model of computing consisting of a directed graph whose
      nodes represent the states of the computation and whose arcs show how
      to move from one state to another. Every [regular expression](#regular_expression)
      corresponds to a finite state machine.
    acronym: FSM
  es:
    term: máquina de estados finitos
    def: >
      Un modelo teórico de cómputo que consiste de un grafo dirigido cuyos
      nodos representan los estados de una computación y cuyos arcos muestran
      cómo moverse de un estado a otro. Cada [expresión regular](#regular_expression)
      corresponde a una máquina de estados finitos.

- key: fixed_width_string
  en:
    term: fixed-width (of strings)
    def: >
      A set of character strings that have the same length. Databases often used
      fixed-width strings to make storage and access more efficient; short
      strings are [padded](#pad_string) up to the required length and long
      strings are truncated.
  es:
    term: ancho fijo (de cadenas)
    def: >
      Un conjunto de cadenas de caracteres que tienen la misma longitud. Las
      bases de datos a menudo usaban cadenas de ancho fijo para hacer el acceso
      y almacenaje más eficiente; las cadenas cortas son [rellenadas](#pad_string)
      hasta la longitud requerida, y las cadenas largas son truncadas.
  

- key: fixture
  en:
    term: fixture
    def: >
      The thing on which a test is run, such as the [parameters](#parameter) to
      the function being tested or the file being processed.
  es:
    term: fixture
    def: >
      La cosa sobre la que se ejecuta una prueba, como los [parámetros](#parameter)
      de la función a probar, o el archivo siendo procesado.

- key: fluent_interface
  en:
    term: fluent interface
    def: >
      A style of object-oriented programming in which methods return objects so
      that other methods can immediately be called.
  break: true
  es:
    term: interfaz fluida
    def: >
      Un estilo de programación orientada a objetos en la que los métodos retornan
      objetos para que otros métodos pueda llamarlos de inmediato.
  
- key: folder
  en:
    term: folder
    def: >
      Another term for a [directory](#directory).
  es:
    term: folder
    def: >
      Otro término para un [directorio](#directory).    

- key: garbage_collection
  en:
    term: garbage collection
    def: >
      The process of identifying memory that has been allocated but is no longer
      in use and reclaiming it to be re-used.
  es:
    term: recolector de basura
    def: >
      El proceso de identificar memoria que ha sido asignada pero no se usa más,
      para reclamarla y reusarla.

- key: generator_function
  ref:
  - iterator_pattern
  en:
    term: generator function
    def: >
      A function whose state is automatically saved when it returns a value so
      that execution can be restarted from that point the next time it is
      called. One example of generator functions use is to produce streams of
      values that can be processed by `for` loops.
  es:
    term: función generadora
    def: >
      Una función cuyo estado se guarda automáticamente cuando retorna un  valor
      de forma que la ejecución pueda reiniciarse desde ese punto la próxima
      vez que sea llamada. Un ejemplo de uso de función generadora es producir
      valores corrientes que puedan procesarse por ciclos `for`.

- key: generic_function
  en:
    term: generic function
    def: >
      A collection of functions with similar purpose, each operating on a
      different class of data.
  es:
    term: función generadora
    def: >
      Una función cuyo estado se guarda automáticamente cuando retorna un  valor
      de forma que la ejecución pueda reiniciarse desde ese punto la próxima
      vez que sea llamada. UN ejemplo de uso de función generadora es producir
      valores corrientes que puedan procesarse por ciclos `for`.

- key: global_variable
  ref:
  - local_variable
  en:
    term: global variable
    def: >
      A variable defined outside any particular function or [package](#package)
      namespace, which is therefore visible to all functions.
  es:
    term: variable global
    def: >
      Una variable definida fuera de una función particular o nombre de espacios
      de un [paquete](#package), lo que la hace visible a todas las funciones.

- key: globbing
  en:
    term: globbing
    def: >
      To specify a set of filenames using a simplified form of [regular
      expressions](#regular_expression), such as `*.dat` to mean "all files
      whose names end in `.dat`". The name is derived from "global".
  es:
    term: globbing
    def: >
      Especificar un conjunto de archivos usando una forma simplificada de
      [expresiones regulares](#regular_expression), como `*.dat` para decir
      "todos los archivos con nombres que terminen en `*.dat`". El nombre
      se deriva de "global".


- key: graph
  ref:
  - tree
  en:
    term: graph
    def: >
      A plot or a chart that displays data, or a data structure in which
      [nodes](#node) are connected to one another by [edges](#edge).
  es:
    term: grafo
    def: >
      Un trazo o un gráfico que despliega datos, o una estructura de datos
      en la cual los [nodos](#node) están conectados a otro por las 
      [aristas](#edge).

- key: greedy_algorithm
  en:
    term: greedy algorithm
    def: >
      An algorithm that consumes as much input as possible, as early as
      possible.
  es:
    term: algoritmo voraz
    def: >
      Un algoritmo que consume tanta entrada como sea posible, tan pronto
      como sea posible.

- key: handler
  en:
    term: handler
    def: >
      A [callback function](#callback) responsible for handling some particular
      event, such as the user clicking on a button or new data being receiving
      from a file.
  es:
    term: manejador
    def: >
      Una [función de retro-llamada](#callback) responsable de manejar
      algún evento particular, como el usuario dando clic a un botón o
      nuevo dato siendo recibido desde un archivo.

- key: hash_code
  en:
    term: hash code
    def: >
      A value generated by a [hash function](#hash_function). Good hash codes
      have the same properties as random numbers in order to reduce the
      frequency of [collisions](#collision).
  es:
    term: código hash
    def: >
      Un valor generado por una [función hash](#hash_function). Los
      buenos códigos hash tienen las mismas propiedades como números
      aleatorios para poder reducir la frecuencia de [colisiones](#collision).

- key: hash_function
  en:
    term: hash function
    def: >
      A function that turns arbitrary data into a bit array, or a [key](#key),
      of a fixed size. Hash functions are used to determine where data should be
      stored in a [hash table](#hash_table).
  es:
    term: función hash
    def: >
      Una función que convierte datos arbitrarios en un arreglo de bits, o 
      una [llave](#key), de un tamaño fijo. Las funciones hash se usan para
      determinar dónde debe almacenarse un dato en una [tabla hash](#hash_table).

- key: hash_table
  en:
    term: hash table
    def: >
      A data structure that calculates a pseudo-random key (location) for each
      value passed to it and stores the value in that location. Hash tables
      enable fast lookup for arbitrary data. This occurs at the cost of extra
      memory because hash tables must always be larger than the amount of
      information they need to store, to avoid the possibility of data
      collisions, when the hash function returns the same key for two different
      values.
  es:
    term: tabla hash 
    def: >
      Una estructura de datos que calcula una llave seudo-aleatoria (ubicación)
      para cada valor pasado a ella, y almacena el valor en esa localidad. Las
      tablas hash facilitan búsqueda rápida para datos arbitrarios. Eso ocurre
      al costo de memoria extra porque las tablas hash siempre deben ser más
      grandes que la cantidad de información que necesitan almacenar, para evitar
      la posibilidad de colisiones de datos, cuando la función hash retorne la
      misma llave para dos valores distintos.

- key: header_file
  en:
    term: header file
    def: >
      In C and C++, a file that defines constants and function
      [signatures](#signature) but does not contain runnable code. Header files
      tell the including file what is defined in other files so that the
      compiler can generate correct code.
  es:
    term: archivo de cabecera
    def: >
      En C y C++, un archivo que define constantes, y las [firmas](#signature)
      de las funciones, pero no contiene código ejecutable. Los archivos de
      cabecera dicen al archivo que los incluye qué está definido en otros
      archivos, para que el compilador pueda generar el código correcto.

- key: heterogeneous
  ref:
  - homogeneous
  en:
    term: heterogeneous
    def: >
      Containing mixed data types. For example, an array in Javascript can
      contain a mix of numbers, character strings, and values of other types.
  es:
    term: heterogéneo
    def: >
      Contener tipos de datos mezclados. Por ejemplo, un arreglo en Javascript
      puede contener una mezcla de números, cadenas de texto, y valores de otros
      tipos.

- key: heuristic
  en:
    term: heuristic
    def: >
      A rule or guideline that isn't guaranteed to produce the desired result,
      but usually does.
  es:
    term: heurística
    def: >
      Una regla o directriz que no está garantizada que produzca el resultado
      deseado, aunque normalmente lo hace.

- key: homogeneous
  ref:
  - heterogeneous
  en:
    term: homogeneous
    def: >
      Containing a single data type. For example, a [vector](#vector) must be
      homogeneous: its values must all be numeric, logical, etc.
  es:
    term: homogéneo
    def: >
      Contener un solo tipo de datos. Por ejemplo, un [vector](#vector) debe
      ser homogéneo. Sus valores  deben ser todos numéricos, lógicos, etc.

- key: http_request
  ref:
  - http_response
  en:
    term: HTTP request
    def: >
      A message sent from a [client](#client) to a [server](#server) using the
      [HTTP](#http) [protocol](#protocol) asking for data. A request usually
      asks for a web page, image, or other data.
  es:
    term: petición HTTP
    def: >
      Un mensaje enviado desde un [cliente](#client) hacia un [servidor](#server)
      usando el [protocolo](#protocol) [HTTP](#http) que pide datos. Una
      petición pide una página web, imagen, u otros datos.

- key: http_response
  en:
    term: HTTP response
    def: >
      A reply sent from a [server](#server) to a [client](#client) using the
      [HTTP](#http) [protocol](#protocol) in response to a
      [request](#http_request). The response usually contains a web page, image,
      or data.
  es:
    term: respuesta HTTP
    def: >
      Una respuesta enviada desde un [servidor](#server) hacia un
      [cliente](#client) usando el [protocolo](#protocol) [HTTP](#http) como
      respuesta a una [petición]. La respuesta usualmente contiene una página
      web, imagen, o datos.

- key: html
  ref:
  - xml
  en:
    term: HyperText Markup Language
    def: >
      The standard [markup language](#markup_language) used for web pages. HTML
      is represented in memory using [DOM](#dom) (Digital Object Model).
    acronym: HTML
  es:
    term: Lenguaje de Marcado de Hipertexto
    def: >
      El [lenguaje de marcado](#markup_language) estándar usado para las 
      páginas web. HTML se representa en memoria usando DOM](#dom) (El modelo
      de Objetos Digital).

- key: http
  en:
    term: HyperText Transfer Protocol
    def: >
      The standard [protocol](#protocol) for data transfer on the World-Wide
      Web. HTTP defines the format of [requests](#http_request) and
      [responses](#http_response), the meanings of standard error codes, and
      other features.
    acronym: HTTP
  es:
    term: Protocolo de Transferencia de Hipertexto
    def: >
      El [protocolo](#protocol) estándar  para la transferencia de datos en la
      World-Wide Web. HTTP  define el formato de las [peticiones](#http_request) 
      y [respuestas](#http_response), los significados de códigos estándar de
      errores, y otras características.

- key: idiomatic
  en:
    term: idiomatic
    def: >
      To use a language in the same way as a fluent or native speaker. Programs
      are called idiomatic if they use the language the way that proficient
      programmers use it.
  es:
    term: idiomático
    def: >
      Usar un lenguaje en la misma forma como un parlante nativo. Los programas
      se llaman idiomáticos si usan el lenguaje de la manera que los programadores
      destacados lo hacen.

- key: iife
  en:
    term: immediately-invoked function expression
    def: >
      A function that is invoked once at the point where it is defined.  IIFEs
      are typically used to create a [scope](#scope) to hide some function or
      variable definitions.
    acronym: IIFE
  es:
    term: expresión funcional invocada inmediatamente
    def: >
      Una función que se invoca una vez en el punto donde se define. Las IIFEs
      se usan típicamente para crear un [ámbito](#scope) para ocultar alguna
      función o definiciones de variables.

- key: immutable
  en:
    term: immutable
    def: >
      Data that cannot be changed after being created. Immutable data is easier
      to think about, particularly if data structures are shared between several
      tasks, but may result in higher memory requirements.
  es:
    term: immutable
    def: >
      Los datos que no pueden cambiarse tras ser creados. Los datos inmutables
      son más fáciles de razonar, particularmente si las estructuras de datos
      son compartidas entre varias tareas, pero pueden requerir más memoria.

- key: import
  en:
    term: import
    def: >
      To bring things from a [module](#module) into a program for use. In most
      languages a program can only import things that the module explicitly
      [exports](#export).
  es:
    term: importar
    def: >
      Traer cosas de un [módulo](#module) para que los use un programa. En casi
      todos los lenguajes  un programa solo puede importar cosas que el módulo
      [exporta](#export) explícitamente.

- key: index_database
  en:
    term: index (in a database)
    def: >
      An auxiliary data structure in a database used to speed up search for some
      entries. An index increases memory and disk requirements but reduces
      search time.
  es:
    term: índice (de base de datos)
    def: >
      Una estructura de datos auxiliar en una base de datos usado para acelerar
      la búsqueda de algunas entradas. Un índice aumente los requisitos de 
      memoria y disco, pero reduce el tiempo de búsqueda.

- key: inner_function
  en:
    term: inner function
    def: >
      A function defined inside another (outer) function.  Creating and
      returning inner functions is a way to create [closures](#closure).
  es:
    term: función interna
    def: >
      Una función definida dentro de otra función (externa). Crear y
      retornar funciones internass es una forma de crear [clausuras](#closure).

- key: instance
  en:
    term: instance
    def: >
      An [object](#object) of a particular [class](#class).
  es:
    term: instancia
    def: >
      Un [objeto](#object) de una [clase](#class) particular.

- key: instruction_pointer
  en:
    term: instruction pointer
    def: >
      A special [register](#register) in a processor that stores the address of
      the next instruction to execute.
  es:
    term: puntero de instrucción
    def: >
      Un [registro](#register) especial en un procesador que almacena la dirección
      de la siguiente instrucción a ejecutar.

- key: instruction_set
  en:
    term: instruction set
    def: >
      The basic operations that a particular processor can execute directly.
  es:
    term: conjunto de instrucciones
    def: >
      Las operaciones básicas que un procesador puede ejecutar directamente.

- key: interpreted_language
  en:
    term: interpreted language
    def: >
      A high-level language that is not executed directly by the computer, but
      instead is run by an [interpreter](#interpreter) that translates program
      instructions into machine commands on the fly.
  es:
    term: lenguaje interpretado
    def: >
      Un lenguaje de alto nivel  que no se ejecuta directamente por la computadora,
      sino por un [intérprete](#interpreter) que traduce instrucciones de programa
      en comandos máquina sobre la marcha.

- key: interpreter
  en:
    term: interpreter
    def: >
      A program whose job it is to run programs written in a high-level
      [interpreted language](#interpreted_language). Interpreters can run
      interactively, but may also execute commands saved in a file.
  es:
    term: intérprete
    def: >
      Un programa cuyo trabajo es ejecutar programas escritos en un 
      [lenguaje interpretado](#interpreted_language). Los intérpretes pueden correr
      interactivamente, pero también ejecutar comandos guardados en un archivo.

- key: intrinsic_complexity
  en:
    term: intrinsic complexity
    def: >
      The unavoidable complexity inherent in a problem that any solution must
      deal with. The term is used in contrast with
      [accidental complexity](#accidental_complexity).
  es:
    term: complejidad intrínseca
    def: >
      La complejidad inevitable e inherente de un problema con la que tiene que
      lidiar un a solución. El término se usa en contraste con la 
      [complejidad accidental](#accidental_complexity).

- key: introspection
  en:
    term: introspection
    def: >
      Having a program examine itself as it is running; common examples are to
      determine the specific class of a generic object or to get the fields of
      an object when they are not known in advance.
  es:
    term: introspección
    def: >
      Que un programa se examine a sí mismo mientras se ejecuta; ejemplos comunes
      son determinar la clase específica de un objeto genérico o recibir los
      campos de un objeto cuando no se conocen por anticipado.

- key: iso_date_format
  en:
    term: ISO date format
    def: >
      An international standard for formatting dates. While the full standard is
      complex, the most common form is `YYYY-MM-DD`, i.e., a four-digit year, a
      two-digit month, and a two-digit day, separated by hyphens.
  es:
    term: formato de fecha ISO
    def: >
      Un estándar internacional para formatear fechas. Mientras que el estándar
      completo es complejo, su forma más común es `YYYY-MM-DD`, i.e., un año de
      cuatro dígitos, un mes de dos, y un día de dos dígitos, separado por guiones.

- key: iterator_pattern
  ref:
  - visitor_pattern
  en:
    term: Iterator pattern
    def: >
      A [design pattern](#design_pattern) in which a temporary [object](#object)
      or [generator function](#generator_function) produces each value from a
      collection in turn for processing. This pattern hides the differences
      between different kinds of data structures so that everything can be
      processed using loops.
  es:
    term: patrón iterador
    def: >
      Un [patrón de diseño](#design_pattern) en el cual  un [objeto](#object)
      temporal o [función generadora](#generator_function) producen cada valor
      desde una colección a procesar. Este patrón oculta las diferencias entre
      diferentes tipos de estructuras de datos para que todo pueda procesarse
      usando ciclos.

- key: json
  ref:
  - yaml
  en:
    term: JavaScript Object Notation
    def: >
      A way to represent data by combining basic values like numbers and
      character strings in [lists](#list) and [key/value](#dictionary)
      structures. The acronym stands for "JavaScript Object Notation"; unlike
      better-defined standards like [XML](#xml), it is unencumbered by a syntax
      for comments or ways to define a [schema](#schema).
    acronym: JSON
  es:
    term: notación de objeto de JavaScript (JSON)
    def: >
      Una forma de representar datos combinando valores básicos como números y
      cadenas de caracteres en [listas](#list) y estructuras 
      [llave/valor](#dictionary). El acrónimo significa "notación de objeto de
      JavaScript"; a diferencia de estándares mejor definidos, como [XML](#xml),
      no abunda en sintaxis para comentarios o formas de definir un 
      [esquema](#schema).

- key: join
  en:
    term: join
    def: >
      An operation that combines two [tables](#table), typically by matching
      [keys](#key) from one with keys from another.
  es:
    term: join
    def: >
      Una operación que combina  dos [tablas](#table), típicamente empatando
      las [llaves](#key) de una tabla con las de la otra.

- key: key
  en:
    term: key
    def: >
      A [field](#field) or combination of fields whose value(s) uniquely
      identify a [record](#record) within a [table](#table) or dataset. Keys are
      often used to select specific records and in [joins](#join).
  es:
    term: llave
    def: >
      Un [campo](#field) o combinación de campos cuyos valores identifican de
      forma única un [registro](#record) dentro de una [tabla](#table) o
      conjunto de datos. Las llaves se usan a menudo para seleccionar registros
      específicos y en [uniones](#join).

- key: label_address
  en:
    term: label (address in memory)
    def: >
      A human-readable name given to a particular location in memory when
      writing programs in [assembly code](#assembly_code).
  es:
    term: etiqueta (dirección en memoria)
    def: >
      Un nombre legible a los humanos dado a una ubicación particular en memoria
      al escribir programas en [lenguaje ensamblador](#assembly_code).

- key: layout_engine
  en:
    term: layout engine
    def: >
      A piece of software that decides where to place text, images, and other
      elements on a page.
  es:
    term: motor de diseño
    def: >
      Una software que decide donde colocar texto, imágenes, y otros elementos
      en una página.

- key: lazy_matching
  ref:
  - eager_matching
  en:
    term: lazy matching
    def: >
      Matching as little as possible while still finding a valid match.
  es:
    term: asociación tardía
    def: >
      Asociar lo menos posible encontrando aún una coincidencia válida.

- key: lru_cache
  en:
    term: Least Recently Used cache
    def: >
      A [cache](#cache) that discards items that have not been used recently in
      order to limit memory requirements.
    acronym: LRU cache
  es:
    term: caché del menos usado recientemente
    def: >
      Un [caché](#cache) que descarta ítems que no han sido usados recientemente
      para poder limitar los requisitos de memoria.

- key: lexical_scoping
  en:
    term: lexical scoping
    def: >
      To look up the value associated with a name according to the textual
      structure of a program. Most programming languages use lexical scoping
      instead of [dynamic scoping](#dynamic_scoping) because the latter is less
      predictable.
  es:
    term: ámbito léxico
    def: >
      Buscar un valor asociado con un nombre de acuerdo a la estructura textual
      de un programa. La mayoría de los lenguajes de programación usan ámbito
      léxico en vez de [ámbito dinámico](#dynamic_scoping), porque este último
      es menos predecible.

- key: library
  en:
    term: library
    def: >
      An installable collection of software, also often called a
      [module](#module) or [package](#package).
  es:
    term: librería
    def: >
      Una colección instalable de software, a menudo llamado [módulo](#module)
      o [paquete](#package).

- key: lifecycle
  en:
    term: lifecycle
    def: >
      The steps that something is allowed or required to go through. The
      lifecycle of an [object](#object) runs from its
      [construction](#constructor) through the operations it can or must perform
      before it is destroyed.
  es:
    term: ciclo vital
    def: >
      Los pasos que se le permiten dar a algo o que le son requeridos. El ciclo
      vital de un [objeto](#object) van desde su [construcción](#constructor)
      pasando por las operaciones que puede o debe realizar antes de ser 
      destruido.

- key: line_comment
  en:
    term: line comment
    def: >
      A [comment](#comment) in a program that spans part of a single line, as
      opposed to a [block comment](#block_comment) that may span multiple lines.
  es:
    term: ciclo vital
    def: >
      Los pasos que se le permiten dar a algo o que le son requeridos. El ciclo
      vital de un [objeto](#object) van desde su [construcción](#constructor)
      pasando por las operaciones que puede o debe realizar antes de ser 
      destruido.

- key: link
  en:
    term: link (a program)
    def: >
      To combine separately [compiled](#compile) modules into a single runnable
      program.
  es:
    term: enlazar (un programa)
    def: >
      Combinar los módulos [compilados](#compile) individualmente en un solo
      programa ejecutable.

- key: linter
  en:
    term: linter
    def: >
      A program that checks for common problems in software, such as violations
      of indentation rules or variable naming conventions. The name comes from
      the first tool of its kind, called `lint`.
  es:
    term: linter
    def: >
      Un programa que verifica problemas comunes del software, como violaciones
      o reglas de indentado, o convenciones de nomenclatura de variables. El
      nombre procede de la primera de estas herramientas, llamada `lint`.

- key: liskov_substitution_principle
  en:
    term: Liskov Substitution Principle
    def: >
      A design rule stating that it should be possible to replace objects in a
      program with objects of derived classes without breaking the program.
      [Design by contract](#design_by_contract) is intended to enforce this rule.
  es:
    term: principio de sustitución de Liskov
    def: >
      Una regla de diseño que dice que debe ser posible reemplazar objetos
      en un programa con otros de clases derivadas, sin que afecte el programa.
      El [diseño por contrato](#design_by_contract) busca asegurar esta regla.

- key: list
  en:
    term: list
    def: >
      A [vector](#vector) that can contain values of many different
      ([heterogeneous](#heterogeneous)) types.
  es:
    term: lista
    def: >
      Un [vector](#vector) que puede contener valores de muchos tipos
      ([heterogéneos](#heterogeneous)).

- key: literal
  en:
    term: literal
    def: >
      A representation of a fixed value in a program, such as the digits `123`
      for the number 123 or the characters `"abc"` for the string containing
      those three letters.
  es:
    term: literal
    def: >
      Una representación fija de un valor en un programa, como los dígitos `123`
      para el número 123, o los caracteres `"abc"` para la cadena de texto
      con esas tres letras.

- key: literate_programming
  en:
    term: literate programming
    def: >
      A programming paradigm that mixes prose and code so that explanations
      and instructions are side by side.
  es:
    term: programación literaria
    def: >
      Un paradigma de programación que mezcla la prosa con código para que las
      explicaciones e instrucciones vayan lado a lado.

- key: loader
  en:
    term: loader
    def: >
      A function whose job is to read files containing runnable code into memory
      and make that code available to the calling program.
  es:
    term: cargador
    def: >
      Una función que consiste en leer archivos conteniendo código ejecutable
      en memoria y dejarlo disponible para el programa que lo invoque.

- key: local_variable
  ref:
  - closure
  - global_variable
  en:
    term: local variable
    def: >
      A variable defined inside a function which is only visible within that
      function.
  es:
    term: variable local
    def: >
      Una variable definida dentro de una función que solo es visible dentro
      de la función.

- key: log_message
  en:
    term: log message
    def: >
      A status report or error message written to a file as a program runs.
  es:
    term: mensaje de registro
    def: >
      Un reporte de estado o mensaje de error escrito en un archivo cuando un
      programa se ejecuta.

- key: loop_body
  en:
    term: loop body
    def: >
      The statement or statements executed by a loop.
  es:
    term: cuerpo de un ciclo
    def: >
      La sentencia o sentencias que se ejecutan en un ciclo.

- key: loosely_coupled
  ref:
  - tightly_coupled
  en:
    term: loosely coupled
    def: >
      Components in a software system are said to be loosely coupled if they are
      relatively independent of one another, i.e., if any one of them can be
      changed or replaced without others having to be altered as well.
  es:
    term: acoplamiento débil
    def: >
      Los componentes en un sistema de software se dicen estar débilmente
      acoplados si son relativamente independientes entre sí, i.e., si 
      cualquiera puede reemplazarse o cambiarse sin afectar al resto.

- key: macro
  en:
    term: macro
    def: >
      Originally short for "macro-instruction", an instruction to translate some
      of the text into a program into other text before using it.
  es:
    term: macro
    def: >
      Originalmente abreviatura de "macro-instrucción", una instrucción para
      traducir un texto de programa a otro texto previo a su uso.

- key: makefile
  en:
    term: Makefile
    def: >
      A configuration file for the original [build manager](#build_manager).
  es:
    term: Makefile
    def: >
      Un archivo de configuración para el [gestor de compilación](#build_manager)
      original.

- key: manifest
  en:
    term: manifest
    def: >
      A list that specifies the precise versions of a complete set of libraries
      or other software components.
  es:
    term: manifiesto
    def: >
      Una lista que especifica las versiones precisas de un conjunto completo de
      librerías u otros componentes de software.

- key: markdown
  en:
    term: Markdown
    def: >
      A [markup language](#markup_language) with a simple syntax intended as a
      replacement for [HTML](#html).
  es:
    term: Markdown
    def: >
      Un [lenguaje de marcado](#markup_language) con una sintaxis simple que se
      pretende reemplace a [HTML](#html).

- key: markup_language
  ref:
  - xml
  en:
    term: markup language
    def: >
      A set of rules for annotating text to define its meaning or how it should
      be displayed. The markup is usually not displayed, but instead controls
      how the underlying text is interpreted or shown. [Markdown](#markdown) and
      [HTML](#html) are widely-used markup languages for web pages.
  es:
    term: lenguaje de marcado
    def: >
      Un conjunto de reglas para anotar texto para definir su significado o cómo
      debe mostrarse. El marcado normalmente no se muestra, pero sí controla cómo
      el texto mostrado debe ser interpretado o desplegado. [Markdown](#markdown)
      y [HTML](#html) son lenguajes ampliamente usados para páginas web.

- key: method
  en:
    term: method
    def: >
      An implementation of a [generic function](#generic_function) that handles
      objects of a specific class.
  es:
    term: método
    def: >
      Una implementación de una [función genérica](#generic_function) que maneja
      objetos de una clase específica.

- key: method_chaining
  en:
    term: method chaining
    def: >
      A style of object-oriented programming in which an object's methods return
      that object as their result so that another method can immediately be
      called, as in `obj.a().b().c()`.
  es:
    term: encadenado de métodos
    def: >
      Un método de programación orientada a objetos en el que los métodos de un
      objeto retornando objetos como resultado, son llamados inmediatamente por
      otro método, como en `obj.a().b().c()`.

- key: mock_object
  en:
    term: mock object
    def: >
      A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to
      simulate databases, web services, and other complex systems.
  es:
    term: objeto simulado
    def: >
      Un reemplazo simplificado de parte de un programa cuyo comportamiento es
      fácil de controlar y predecir. Estos objetos se usan en las
      [pruebas unitarias] (#unit_test) para simular bases de datos, servicios
      web, y otros sistemas complejos.

- key: module
  en:
    term: module
    def: >
      A reusable software [package](#package), also often called a
      [library](#library).
  es:
    term: módulo
    def: >
      Un [paquete](#package) de software reusable, también llamado frecuentemente
      una [librería](#library).

- key: module_bundler
  en:
    term: module bundler
    def: >
      A program that finds all the dependencies of a set of source files and
      combines them into a single loadable file.
  es:
    term: empaquetador de módulos
    def: >
      Un programa que encuentra todas las dependencias de un conjunto de archivos
      fuente y los combina en un solo archivo cargable.

- key: multi_threaded
  en:
    term: multi-threaded
    def: >
      Capable of performing several operations simultaneously. Multi-threaded
      programs are usually more efficient than
      [single-threaded](#single_threaded) ones, but also harder to understand
      and debug.
  es:
    term: multi-hilo
    def: >
      Capaz de realizar varias operaciones simultáneamente. Los programas multi-hilo
      normalmente son más eficientes que de un  [solo hilo](#single_threaded), pero
      también más difíciles de entender y depurar.

- key: name_collision
  ref:
  - call_stack
  en:
    term: name collision
    def: >
      The ambiguity that arises when two or more things in a program that have
      the same name are active at the same time. Most languages use
      [namespaces](#namespace) to prevent such collisions.
  es:
    term: colisión de nombre
    def: >
      La ambigüedad que surge cuando dos o más cosas en un programa están activas al
      mismo tiempo y con el mismo nombre. Casi todos los lenguajes usan los
      [espacios de nombre](#namespace) para prevenir dichas colisiones.

- key: namespace
  ref:
  - name_collision
  - scope
  en:
    term: namespace
    def: >
      A collection of names in a program that exists in isolation from other
      namespaces. Each function, [object](#object), [class](#class), or
      [module](#module) in a program typically has its own namespace so that
      references to "X" in one part of a program do not accidentally refer to
      something called "X" in another part of the program. Scope is a distinct,
      but related, concept.
  es:
    term: espacio de nombre
    def: >
      Una colección de nombres en un programa que existe en aislamiento de otros
      espacios de nombre. Cada función, [objeto](#object), [clase](#class), o
      [módulo](#module) en un programa típicamente tiene su propio espacio para
      que las referencias a "X" en una parte del programa no se refiera 
      accidentalmente a algo llamado "X" en otra parte del programa. El ámbito
      es un concepto relacionado, pero distinto.

- key: nested_function
  en:
    term: nested function
    def: >
      A function that is defined inside another function.
  es:
    term: función anidada
    def: >
      Una función que se define dentro de otra.

- key: node
  en:
    term: node
    def: >
      An element of a [graph](#graph) that is connected to other nodes by
      [edges](#edge). Nodes typically have data associated with them, such as
      names or weights.
  es:
    term: nodo
    def: >
      Un elemento de un [grafo](#graph) que está conectado a otros nodos por un
      [vértice](#edge). Los nodos típicamente tienen datos asociados a ellos,
      como sus nombres o pesos.

- key: non_blocking_execution
  en:
    term: non-blocking execution
    def: >
      To allow a program to continue running while an operation is in progress.
      For example, many systems support non-blocking execution for file I/O so
      that the program can continue doing work while it waits for data to be
      read from or written to the [filesystem](#filesystem) (which is typically
      much slower than the CPU).
  es:
    term: ejecución no bloqueada
    def: >
      Permitir que un programa continúe mientras una operación está en progreso.
      Por ejemplo, muchos sistemas soportan ejecución no bloqueada para entrada
      y salida de archivos de forma que el programa continua trabajando mientras
      espera leer datos desde o escribirlos hacia el
      [sistema de archivos](#filesystem) (que normalmente es más lento que el CPU).

- key: object
  en:
    term: object
    def: >
      In [object-oriented programming](#oop), a structure that contains the data
      for a specific instance of a [class](#class). The operations the object is
      capable of are defined by the class's [methods](#method).
  es:
    term: objeto
    def: >
      En [programación orientada a objetos](#oop), una estructura que contiene los
      datos de una instancia específica de una [clase](#class). Las operaciones
      que el objeto puede realizar se definen en los [métodos](#method) de la clase.

- key: oop
  en:
    term: object-oriented programming
    def: >
      A style of programming in which functions and data are bound together in
      [objects](#object) that only interact with each other through well-defined
      interfaces.
    acronym: OOP
  es:
    term: programación orientada a objetos
    def: >
      Un estilo de programación en el que las funciones y los datos están juntos en
      [objetos](#object) que solo interactúan entre sí mediante interfaces bien
      definidas.

- key: off_by_one_error
  en:
    term: off-by-one error
    def: >
      A common error in programming in which the program refers to element `i`
      of a structure when it should refer to element `i-1` or `i+1`, or
      processes `N` elements when it should process `N-1` or `N+1`.
  es:
    term: error por un paso
    def: >
      Un error común en programación en el cual el programa se refiere al elemento
      `i` de una estructura, cuando debiera ser `i-1` o `i+1`, o procesa `N`
      elementos cuando debiera procesar `N-1` o `N+1`.

- key: op_code
  en:
    term: op code
    def: >
      The numerical code for a particular instruction that a processor can
      execute.
  es:
    term: código de operación
    def: >
      El código numérico de una instrucción particular que un procesador puede
      ejecutar.

- key: open_closed_principle
  en:
    term: Open-Closed Principle
    def: >
      A design rule stating that software should be open for extension but
      closed for modification, i.e., it should be possible to extend
      functionality without having to rewrite existing code.
  break: true
  es:
    term: principio abierto-cerrado
    def: >
      Una regla de diseño que dice que el software debe ser abierto a extensión
      pero cerrado a modificación, i.e., debe ser posible extender funcionalidad
      sin tener que reescribir código existente.

- key: operating_system
  en:
    term: operating system
    def: >
      A program that provides a standard interface to whatever hardware it is
      running on. Theoretically, any program that only interacts with the
      operating system should run on any computer that operating system runs on.
  es:
    term: sistema operativo
    def: >
      Un programa que provee la interfaz estándar a cualquier hardware en que
      se ejecute. En teoría, cualquier programa que interactúe con el sistema
      operativo debiera ejecutarse en cualquier computadora con ese sistema
      operativo.

- key: package
  en:
    term: package
    def: >
      A collection of code, data, and documentation that can be distributed and
      re-used. Also referred to in some languages as a [library](#library) or
      [module](#module).
  es:
    term: paquete
    def: >
      Una colección de código, datos, y documentación que puede distribuirse
      y reusarse. En algunos lenguajes se le conoce también como 
      [librería](#library) o [módulo](#module).

- key: pad_string
  en:
    term: pad (a string)
    def: >
      To add extra characters to a string to make it a required length.
  es:
    term: rellenar (una cadena)
    def: >
      Añadir caracteres extra a una cadena para que tenga una cierta longitud.

- key: parameter
  ref:
  - argument
  en:
    term: parameter
    def: >
      A variable specified in a function definition that is assigned a value
      when the function is called.
  es:
    term: parámetro
    def: >
      Una variable especificada en una definición de función que se le
      asigna un valor cuando se llama la función.

- key: parent_tree
  en:
    term: parent (in a tree)
    def: >
      A [node](#node) in a [tree](#node) that is above another node (called a
      [child](#child_tree)). Every node in a tree except the [root
      node](#root_tree) has a single parent.
  es:
    term: padre (en un árbol)
    def: >
      Un [nodo](#node) en un [árbol](#tree) que está sobre otro nodo (llamado
      [hijo](#child_tree). Cada nodo en un árbol excepto el 
      [nodo raíz](#root_tree) tiene un solo padre.

- key: parent_class
  en:
    term: parent class
    def: >
      In [object-oriented programming](#oop), the [class](#class) from which a
      sub class (called the [child class](#child_class)) is derived.
  es:
    term: clase padre
    def: >
      En [programación orientada a objetos](#oop), la [clase](#class) desde
      la que una subclase (llamada [clase hija](#child_class)) se deriva.

- key: parser
  en:
    term: parser
    def: >
      A piece of software that translates a textual representation of something
      into a data structure. For example, a [YAML](#yaml) parser reads indented
      text and produces nested lists and objects.
  es:
    term: analizador sintáctico
    def: >
      Una pieza de software que traduce una representación textual de algo
      a una estructura de datos. Por ejemplo, un analizado [YAML](#yaml)
      lee texto indentado y produce listas anidadas y objetos.

- key: pass_test
  ref:
  - fail_test
  en:
    term: pass (a test)
    def: >
      A test passes if the [actual result](#actual_result) matches the [expected
      result](#expected_result).
  es:
    term: pasar (una prueba)
    def: >
      Una prueba pasa si el [resultado actual](#actual_result) coincide con
      el [resultado esperado](#expected_result).

- key: patch
  en:
    term: patch
    def: >
      A single file containing a set of changes to a set of files, separated by
      markers that indicate where each individual change should be applied.
  es:
    term: parche
    def: >
      Un archivo con un conjunto de cambios a un conjunto de archivos, 
      separados por marcadores indicando donde debe aplicarse cada cambio.

- key: path
  ref:
  - absolute_path
  - relative_path
  en:
    term: path (in filesystem)
    def: >
      A [string](#string) that specifies a location in a
      [filesystem](#filesystem). In Unix, the [directories](#directory) in a
      path are joined using `/`.
  es:
    term: ruta (en un sistema de archivos)
    def: >
      Una [cadena](#string) que especifica una ubicación en un 
      [sistema de archivos](#filesystem). En Unix, los [directorios](#directory)
      son una ruta unida usando `/`.

- key: pattern_rule
  en:
    term: pattern rule
    def: >
      A generic [build rule](#build_rule) that describes how to update any file
      whose name matches a pattern. Pattern rules often use [automatic
      variables](#automatic_variable) to represent the actual filenames.
  es:
    term: regla de patrón
    def: >
      Una [regla de compilado] genérica que describa cómo actualizar
      cualquier archivo cuyo nombre coincide con un patrón. Las reglas de
      patrón usan a menudo [variables automáticas](#automatic_variable) para
      representar los nombres de archivo reales.

- key: pipe
  en:
    term: pipe
    def: >
      To use the output of one computation as the input for the next, or the
      connection between the two computations responsible for the data transfer.
      Pipes were popularized by the [Unix shell](#shell), and are now used in
      many different programming languages and systems.
  es:
    term: pipe
    def: >
      Usar la salida de un cómputo como la entrada del siguiente, o la
      conexión entre dos cómputos responsables de la transferencia de datos.
      Las pipe fueron popularizadas por el [shell de Unix](#shell), y ahora
      se usan en muchos sistemas y lenguajes de programación.

- key: pipe_shell
  en:
    term: pipe (in the Unix shell)
    def: >
      The `|` used to make the output of one command the input of the next.
  es:
    term: pipe (en el shell de Unix)
    def: >
      La  `|` usada para usar la salida de un comando como entrada para otro.

- key: plugin_architecture
  en:
    term: plugin architecture
    def: >
      A style of application design in which the main program loads and runs
      small independent modules that do the bulk of the work.
  es:
    term: arquitectura de plugin
    def: >
      Un estilo de diseño de aplicación en la que el programa principal carga
      y ejecuta módulos independientes pequeños que hacen la mayoría del trabajo.

- key: polymorphism
  en:
    term: polymorphism
    def: >
      Having many different implementations of the same interface. If a set of
      functions or objects are polymorphic, they can be called interchangeably.
  es:
    term: polimorfismo
    def: >
      Tener muchas implementaciones diferentes de la misma interfaz. Si un
      conjunto de funciones u objetos son polimórficos, pueden llamarse
      de forma intercambiable.

- key: post_condition
  ref:
  - design_by_contract
  - pre_condition
  en:
    term: post-condition
    def: >
      Something that is guaranteed to be true after a function runs
      successfully. Post-conditions are often expressed as
      [assertions](#assertion) that are guaranteed to be true of a function's
      results.
  break: true
  es:
    term: post-condición
    def: >
      Algo que está garantizado ser cierto luego que una función se ejecuta
      exitosamente. Las post-condiciones se expresan a menudo como una
      [aserción](#assertion) que garantiza ser cierta como resultado de la
      función.

- key: pre_condition
  ref:
  - design_by_contract
  - post_condition
  en:
    term: pre-condition
    def: >
      Something that must be true before a function runs in order for it to
      work correctly. Pre-conditions are often expressed as as
      [assertions](#assertion) that must be true of a function's inputs in
      order for it to run successfully.
  es:
    term: pre-condición
    def: >
      Algo que debe ser cierto antes que una función se ejecute para que
      pueda funcionar correctamente. Las pre-condiciones a menudo se
      expresan como [aserciones](#assertion) que deben ser ciertas sobre
      los argumentos de una función para que pueda funcionar exitosamente.

- key: precedence
  en:
    term: precedence
    def: >
      The priority of an operation. For example, multiplication has a higher
      precedence than addition, so `a+b*c` is read as "the sum of `a` with the
      product of `b` and `c`".
  es:
    term: precedencia
    def: >
      La prioridad de una operación. Por ejemplo, la multiplicación tiene
      una mayor precedencia que la adición, así que `a+b*c` se lee como
      "la sima de `a` con el producto de `b` por `c`".

- key: prerequisite
  ref:
  - dependency
  en:
    term: prerequisite
    def: >
      Something that a [build target](#build_target) depends on.
  es:
    term: prerrequisito
    def: >
      Algo de lo que un [objetivo de compilado](#build_target) depende.

- key: process
  en:
    term: process
    def: >
      An [operating system](#operating_system)'s representation of a running
      program. A process typically has some memory, the identity of the user who
      is running it, and a set of connections to open files.
  es:
    term: proceso
    def: >
      La representación de un [sistema operativo](#operating_system) de un
      programa en ejecución. Un proceso típicamente tiene algo de memoria, la
      identidad del usuario que lo ejecuta, y un conjunto de conexiones para 
      abrir archivos.

- key: promise
  ref:
  - promisification
  en:
    term: promise
    def: >
      A way to represent the result of a delayed or
      [asynchronous](#asynchronous) computation. A promise is a placeholder for
      a value that will eventually be computed; any attempt to read the value
      before it is available blocks, while any such attempt after the
      computation finishes acts like a normal read.
  es:
    term: promesa
    def: >
      Una forma de representar el resultado de un cálculo 
      [asíncrono](#asynchronous). Una promesa es un marcador de posición
      para un valor que eventualmente será calculado; cualquier intento
      de leerlo antes se bloquea, mientras cualquier intento después de
      que termine el cómputo, actúa como una lectura normal.

- key: promisification
  en:
    term: promisification
    def: >
      In JavaScript, the act of wrapping a callback function in a
      [promise](#promise) for uniform asynchronous execution.
  es:
    term: promisificación
    def: >
      En JavaScript, el acto de envolver una función retro-llamada en
      en una [promesa](#promise) para ejecución asíncrona uniforme.

- key: protocol
  en:
    term: protocol
    def: >
      Any standard specifying how two pieces of software interact. A network
      protocol such as [HTTP](#http) defines the messages that
      [clients](#client) and [servers](#server) exchange on the World-Wide Web;
      [object-oriented](#oop) programs often define protocols for interactions
      between [objects](#object) of different [classes](#class).
  es:
    term: protocolo
    def: >
      Cualquier estándar especificando cómo dos piezas de software
      interactúan. Un protocolo de red como [HTTP](#http) define los 
      mensajes que [clientes](#client) y [servidores](#server)
      intercambian en la World-Wide Web; los programas
      [orientados a objetos](#oop)  a menudo definen protocolos para
      interacciones entre [objetos](#object) de diferentes [clases](#class).

- key: prune
  en:
    term: prune
    def: >
      To remove branches and nodes from a tree, or to rule out
      partially-complete solutions when searching for an overall solution in
      order to reduce work.
  es:
    term: podar
    def: >
      Remover ramas y nodos de un árbol, o para excluir soluciones
      parcialmente completas al buscar una solución completa, y así
      reducir el trabajo.

- key: pseudo_random_number
  en:
    term: pseudo-random number
    def: >
      A value generated in a repeatable way that resembles the true randomness
      of the universe well enough to fool observers.
  es:
    term: número seudo-aleatorio
    def: >
      Un valor generado en una forma repetible que asemeja la verdadera
      aleatoriedad del universo, lo suficientemente bien como para
      engañar a observadores.

- key: prng
  ref:
  - seed
  en:
    term: pseudo-random number generator
    def: >
      A function that can generate [pseudo-random
      numbers](#pseudo_random_number).
    acronym: PRNG
  es:
    term: generador de números seudo-aleatorio
    def: >
      Una función que puede generar números
      seudo-aleatorios(#pseudo_random_number).

- key: query_selector
  en:
    term: query selector
    def: >
      A pattern that specifies a set of [DOM](#dom) nodes.  Query selectors are
      used in [CSS](#css) to specify the elements that rules apply to, or by
      JavaScript programs to manipulate web pages.
  es:
    term: selector de consulta
    def: >
      Un patrón que especifica un conjunto de nodos [DOM](#dom). Los 
      selectores de consulta se usan en [CSS](#css) parar especificar
      los elementos a los que se aplican reglas, o en los programas
      JavaScript para manipular páginas web.

- key: query_string
  en:
    term: query string
    def: >
      The portion of a [URL](#url) after the question mark `?` that specifies
      extra parameters for the [HTTP request](#http_request) as name-value
      pairs.
  es:
    term: cadena de consulta
    def: >
      La porción de una [URL](#url) después del signo interrogatorio `?`
      que especifica parámetros extra de la [petición HTTP](#http_request)
      como valores nombre-valor.

- key: race_condition
  en:
    term: race condition
    def: >
      A situation in which a result depends on the order in which two or more
      concurrent operations are carried out.
  es:
    term: condición de carrera
    def: >
      Una situación en la que el resultado depende del orden en que dos
      o más operaciones concurrentes se ejecutan.

- key: raise_exception
  ref:
  - throw_exception
  en:
    term: raise (an exception)
    def: >
      To signal that something unexpected or unusual has happened in a program
      by creating an [exception](#exception) and handing it to the
      [error-handling](#error_handling) system, which then tries to find a point
      in the program that will [catch](#catch_exception) it.
  es:
    term: levantar (una excepción)
    def: >
      Señalar que algo inesperado o inusual ha ocurrido en un programa
      mediante la creación de una [excepción](#exception) y pasarla al
      sistema de [manejo de errores](#error_handling), el cual intenta
      de encontrar un punto en el programa que la [atrape](#catch_exception

- key: repl
  en:
    term: read-eval-print loop
    def: >
      An interactive program that reads a command typed in by a user, executes
      it, prints the result, and then waits patiently for the next command.
      REPLs are often used to explore new ideas, or for debugging.
    acronym: REPL
  es:
    term: bucle lectura-evaluación-impresión (REPL)
    def: >
      Un programa interactivo que lee un comando escrito por un usuario,
      lo ejecuta, imprime su resultado, y entonces pacientemente espera por
      el siguiente comando. Un REPL a menudo se usa para explorar nuevas
      ideas, o para depurar.

- key: record
  en:
    term: record
    def: >
      A group of related values that are stored together. A record may be
      represented as a [tuple](#tuple) or as a row in a [table](#table); in the
      latter case, every record in the table has the same [fields](#field).
  es:
    term: registro
    def: >
      Un grupo de valores relacionados que se almacenan juntos. Un registro
      puede representarse como una [tupla](#tuple) o como una hilera en una
      [tabla](#table); en el último caso, cada registro en la tabla tiene
      los mismos [campos](#field).

- key: register
  en:
    term: register
    def: >
      A small piece of memory (typically one [word](#word_memory) long) built
      into a processor that operations can refer to directly.
  es:
    term: registro (de procesador)
    def: >
      Una pequeña pieza de memoria (típicamente de una 
      [palabra](#word_memory)) construida dentro de un procesador a la que
      las operaciones pueden referirse directamente.

- key: regular_expression
  en:
    term: regular expression
    def: >
      A pattern for matching text, written as text itself. Regular expressions
      are sometimes called "regexp", "regex", or "RE", and are powerful tools
      for working with text.
  es:
    term: expresión regular
    def: >
      Un patrón para coincidencias de texto, escrito en texto. Las expresiones
      regulares se llaman a veces "regexp", "regex", o "RE", y son herramientas
      poderosas para trabajar con texto.

- key: relational_database
  ref:
  - sql
  en:
    term: relational database
    def: >
      A database that organizes information into [tables](#table), each of which
      has a fixed set of named [fields](#field) (shown as columns) and a
      variable number of [records](#record) (shown as rows).
  es:
    term: base de datos relacional
    def: >
      Una base de datos que organiza información en [tablas](#table), cada una
      de las que tiene un conjunto fijo de [campos](#field) (mostrado como
      columnas) y un número variable de [registros](#record) (mostrado como
      hileras).

- key: relative_error
  en:
    term: relative error
    def: >
      The absolute value of the difference between the actual and correct value
      divided by the correct value. For example, if the actual value is 9 and
      the correct value is 10, the relative error is 0.1. Relative error is
      usually more useful than [absolute error](#absolute_error).
  es:
    term: error relativo
    def: >
      El valor absoluto de la diferencia entre el valor actual y correcto
      dividido entre el valor correcto. Por ejemplo, si el valor actual es 9
      y el correcto es 10, el error relativo es 0.1. El error relativo es
      normalmente más útil que el [error absoluto](#absolute_error).

- key: relative_path
  ref:
  - absolute_path
  en:
    term: relative path
    def: >
      A path that is interpreted relative to some other location, such as the
      [current working directory](#current_working_directory). A relative path
      is the equivalent of giving directions using terms like "straight" and
      "left".
  es:
    term: ruta relativa
    def: >
      Una ruta que se interpreta como relativa respecto a otra ubicación,
      como el [directorio actual](#current_working_directory). Una ruta
      relativa es el equivalente de dar indicaciones usando términos como
      "directo" e "izquierda".

- key: root_tree
  en:
    term: root (in a tree)
    def: >
      The [node](#node) in a [tree](#tree) of which all other nodes are direct
      or indirect [children](#child_tree), or equivalently the only node in the
      tree that has no [parent](#parent_tree).
  es:
    term: raíz (en un árbol)
    def: >
      El [nodo](#node) en un [árbol](#tree) del cual otros nodos son
      [hijos](#child_tree) directos o indirectos, o equivale también al
      único nodo en el árbol sin [padre](#parent_tree).

- key: row_major
  ref:
  - column_major
  en:
    term: row-major storage
    def: >
      Storing each row of a two-dimensional array as one block of memory so that
      elements in the same column are far apart.
  es:
    term: almacenamiento de fila principal
    def: >
      Almacenar cada hilera de un arreglo bi-dimensional como un bloque
      de memoria de forma que elementos en la misma columna estén lejos.

- key: runnable_documentation
  en:
    term: runnable documentation
    def: >
      Statements about code that can be executed to check their correctness,
      such as [assertions](#assertion) or [type
      declarations](#type_declaration).
  es:
    term: documentación ejecutable
    def: >
      Sentencias sobre código que pueden ejecutarse para validar su
      exactitud, como [aserciones](#assertion), o 
      [declaraciones de tipo](#type_declaration).

- key: sandbox
  en:
    term: sandbox
    def: >
      A testing environment that is separate from the production system, or an
      environment that is only allowed to perform a restricted set of operations
      for security reasons.
  es:
    term: caja de arena
    def: >
      Un ambiente de prueba que está separado del sistema productivo, o
      un ambiente que solo se permite para realizar un conjunto reducido
      de operaciones por razones de seguridad.

- key: sat_solver
  en:
    term: SAT solver
    def: >
      A library or application that determines whether there is an assignment of
      true and false to a set of [Boolean](#boolean) variables that makes an
      expression true (i.e., that satisfies the expression).
  es:
    term: solvente SAT
    def: >
      Una librería o aplicación que determina si hay una asignación de
      verdadero o falso a un conjunto de variables [booleanas](#boolean)
      que hace cierta una expresión (i.e., que la satisface).

- key: schema
  en:
    term: schema
    def: >
      A specification of the format of a dataset, including the name, format,
      and content of each [table](#table).
  es:
    term: esquema
    def: >
      Una especificación del formato de un conjunto de datos, incluyendo
      nombre, formato, y contexto de cada [tabla](#table).

- key: scope
  ref:
  - closure
  - global_variable
  - local_variable
  - namespace
  en:
    term: scope
    def: >
      The portion of a program within which a definition can be seen and used.
  es:
    term: ámbito
    def: >
      La porción de un programa dentro de la que una definición puede
      verse y usarse.

- key: scope_creep
  en:
    term: scope creep
    def: >
      Slow but steady increase in a project's goals after the project starts.
  es:
    term: ampliación de ámbito
    def: >
      El lento pero constante aumento de las metas de un proyecto luego
      que este inicia.

- key: scoring_function
  en:
    term: scoring function
    def: >
      A function that measures or estimates how good a solution to a problem is.
  es:
    term: función de puntaje
    def: >
      Una función que mide o estima cuán buena es una solución.

- key: search_path
  en:
    term: search path
    def: >
      The list of directories that a program searches to find something. For
      example, the Unix [shell](#shell) uses the search path stored in the
      `PATH` variable when trying to find a program whose name it has been
      given.
  es:
    term: ruta de búsqueda
    def: >
      La lista de directorios que un programa busca para encontrar algo.
      Por ejemplo, el [shell](#shell) de Unix usa la ruta de búsqueda
      almacenada en la variable `PATH` cuando se busca un programa cuyo
      nombre de ha dado.

- key: seed
  en:
    term: seed
    def: >
      A value used to initialize a [pseudo-random number generator](#prng).
  es:
    term: semilla
    def: >
      Un valor usado para inicializar un 
      [generador de números seudo-aleatorio](#prng).

- key: semantic_versioning
  en:
    term: semantic versioning
    def: >
      A standard for identifying software releases. In the version identifier
      `major.minor.patch`, `major` changes when a new version of software is
      incompatible with old versions, `minor` changes when new features are
      added to an existing version, and `patch` changes when small [bugs](#bug)
      are fixed.
  es:
    term: versionado semántico
    def: >
      Un estándar para identificar las versiones de software. En el 
      identificador de versión major.minor.patch`, `major` cambia 
      cuando una nueva versión del software es incompatible con
      versiones anteriores, `minor` cambia cuando nuevas funciones
      son añadidas a una versión existente, y `patch` cambia cuando
      pequeños [errores] son corregidos.

- key: server
  en:
    term: server
    def: >
      Typically, a program such as a database manager or web server that
      provides data to a [client](#client) upon request.
  es:
    term: servidor
    def: >
      Típicamente un programa como un gestor de base de datos o un
      servidor web que provee datos a un [cliente](#client) bajo pedido.

- key: sha_1
  en:
    term: SHA-1 hash
    def: >
      A [cryptographic hash function](#cryptographic_hash_function) that
      produces a 160-bit output.
  es:
    term: hash SHA-1
    def: >
      Una [función hash criptográfica](#cryptographic_hash_function)
      que produce una salida de 160 bits.

- key: shell
  en:
    term: shell
    def: >
      A [command-line interface](#cli) that allows a user to interact with the
      [operating system](#operating_system), such as Bash (for Unix and MacOS)
      or PowerShell (for Windows).
  es:
    term: shell
    def: >
      Una [interfaz de línea de comandos](#cli) que permite a un usuario
      interactuar con el [sistema operativo](#operating_system), como
      Bash (para Unix y MacOS) o Powershell(para Windows).

- key: shell_variable
  en:
    term: shell variable
    def: >
      A variable set and used in the [Unix shell](#shell). Commonly-used shell
      variables include `HOME` (the user's home directory) and `PATH` (their
      [search path](#search_path)).
  es:
    term: variable de shell
    def: >
      Una variable usada en el [shell de Unix](#shell). Las variables de
      shell más usadas incluyen `HOME` (el directorio inicial del usuario)
      y `PATH` (la [ruta de búsqueda](#search_path)).

- key: side_effect
  en:
    term: side effect
    def: >
      A change made by a function while it runs that is visible after the
      function finishes, such as modifying a [global variable](#global_variable)
      or writing to a file. Side effects make programs harder for people to
      understand, since the effects are not necessarily clear at the point in
      the program where the function is called.
  es:
    term: efecto colateral
    def: >
      Un cambio hecho por una función mientras se ejecuta que es visible
      tras su término, como modificar una [variable global](#global_variable)
      o escribir a un archivo. Los efectos colaterales hace más difíciles los
      programas para que la gente los entienda, ya que esos efectos no son
      claros en el lugar donde la función es llamada.

- key: signature
  en:
    term: signature
    def: >
      The set of parameters (with types or meaning) that characterize the
      calling interface of a function or set of functions. Two functions with
      the same signature can be called interchangeably.
  es:
    term: FIXME
    def: >
      FIXME

- key: single_threaded
  en:
    term: single-threaded
    def: >
      A model of program execution in which only one thing can happen at a time.
      Single-threaded execution is easier for people to understand, but less
      efficient than [multi-threaded](#multi_threaded) execution.
  es:
    term: FIXME
    def: >
      FIXME

- key: singleton
  ref:
  - singleton_pattern
  en:
    term: singleton
    def: >
      A set with only one element, or a [class](#class) with only one
      [instance](#instance).
  es:
    term: FIXME
    def: >
      FIXME

- key: singleton_pattern
  en:
    term: Singleton pattern
    def: >
      A [design pattern](#design_pattern) that creates a [singleton](#singleton)
      [object](#object) to manage some resource or service, such as a database
      or [cache](#cache). In [object-oriented programming](#oop), the pattern is
      usually implemented by hiding the [constructor](#constructor) of the
      [class](#class) in some way so that it can only be called once.
  es:
    term: FIXME
    def: >
      FIXME

- key: slug
  en:
    term: slug
    def: >
      An abbreviated portion of a page's URL that uniquely identifies it. In the
      example `https://www.mysite.com/category/post-name`, the slug is
      `post-name`.
  es:
    term: FIXME
    def: >
      FIXME

- key: source_map
  en:
    term: source map
    def: >
      A table used to translate a piece of code back to the lines in the
      original source.
  es:
    term: FIXME
    def: >
      FIXME

- key: sparse_matrix
  en:
    term: sparse matrix
    def: >
      A matrix in which most of the values are zero (or some other value).
      Rather than storing many copies of the same values, programs will often
      use a special data structure that only stores the "interesting" values.
  es:
    term: FIXME
    def: >
      FIXME

- key: sql
  en:
    term: SQL
    def: >
      The language used for writing queries for a [relational
      database](#relational_database). The term was originally an acronym for
      Structured Query Language.
  es:
    term: FIXME
    def: >
      FIXME

- key: stack_frame
  en:
    term: stack frame
    def: >
      A section of the [call stack](#call_stack) that records details of a
      single call to a specific function.
  es:
    term: FIXME
    def: >
      FIXME

- key: build_stale
  en:
    term: stale (in build)
    def: >
      To be out-of-date compared to a [prerequisite](#prerequisite). A [build
      manager](#build_manager)'s job is to find and update things that are
      stale.
  es:
    term: FIXME
    def: >
      FIXME

- key: stderr
  ref:
  - stdin
  - stdout
  en:
    term: standard error
    def: >
      A predefined communication channel for a [process](#process) typically
      used to report errors.
  es:
    term: FIXME
    def: >
      FIXME

- key: stdin
  ref:
  - stderr
  - stdout
  en:
    term: standard input
    def: >
      A predefined communication channel for a [process](#process), typically
      used to read input from the keyboard or from the previous process in a
      [pipe](#pipe_shell).
  es:
    term: FIXME
    def: >
      FIXME

- key: stdout
  ref:
  - stderr
  - stdin
  en:
    term: standard output
    def: >
      A predefined communication channel for a [process](#process), typically
      used to send output to the screen or to the next process in a
      [pipe](#pipe_shell).
  es:
    term: FIXME
    def: >
      FIXME

- key: static_site_generator
  en:
    term: static site generator
    def: >
      A software tool that creates HTML pages from templates and content.
  es:
    term: FIXME
    def: >
      FIXME

- key: stream
  en:
    term: stream
    def: >
      A sequential flow of data, such as the [bits](#bit) arriving across a
      network connection or the bytes read from a file.
  es:
    term: FIXME
    def: >
      FIXME

- key: streaming_api
  en:
    term: streaming API
    def: >
      An [API](#api) that processes data in chunks rather than needing to have
      all of it in memory at once. Streaming APIs usually require
      [handlers](#handler) for events such as "start of data", "next block", and
      "end of data".
  es:
    term: FIXME
    def: >
      FIXME

- key: string
  en:
    term: string
    def: >
      A block of text in a program. The term is short for "character string".
  es:
    term: FIXME
    def: >
      FIXME

- key: string_interpolation
  en:
    term: string interpolation
    def: >
      The process of inserting text corresponding to specified values into a
      [string](#string), usually to make output human-readable.
  es:
    term: FIXME
    def: >
      FIXME

- key: synchronous
  ref:
  - asynchronous
  en:
    term: synchronous
    def: >
      To happen at the same time. In programming, synchronous operations are
      ones that have to run simultaneously, or complete at the same time.
  es:
    term: FIXME
    def: >
      FIXME

- key: tab_completion
  en:
    term: tab completion
    def: >
      A technique implemented by most [REPLs](#repl), [shells](#shell), and
      programming editors that completes a command, variable name, filename, or
      other text when the TAB key is pressed.
  es:
    term: FIXME
    def: >
      FIXME

- key: table
  en:
    term: table
    def: >
      A set of [records](#record) in a [relational
      database](#relational_database) or [data frame](#data_frame).
  es:
    term: FIXME
    def: >
      FIXME

- key: tagged_data
  en:
    term: tagged data
    def: >
      A technique for storing data in a two-part structure, where one part
      identifies the type and the other part stores the bits making up the
      value.
  es:
    term: FIXME
    def: >
      FIXME

- key: template_method_pattern
  en:
    term: Template Method pattern
    def: >
      A [design pattern](#design_pattern) in which a [parent
      class](#parent_class) defines an overall sequence of operations by calling
      [abstract methods](#abstract_method) that [child classes](#child_class)
      must then implement. Each child class then behaves in the same general
      way, but implements the steps differently.
  es:
    term: FIXME
    def: >
      FIXME

- key: test_harness
  en:
    term: test harness
    def: >
      A program written to test some other program or set of functions,
      typically to measure their performance.
  es:
    term: FIXME
    def: >
      FIXME

- key: test_runner
  en:
    term: test runner
    def: >
      A program that finds and runs software tests and reports their results.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: test_subject
  en:
    term: test subject
    def: >
      The thing being tested, sometimes also called the system under test (SUT).
  es:
    term: FIXME
    def: >
      FIXME

- key: tdd
  en:
    term: test-driven development
    def: >
      A programming practice in which tests are written before a new feature is
      added or a [bug](#bug) is fixed in order to clarify the goal.
    acronym: TDD
  es:
    term: FIXME
    def: >
      FIXME

- key: throw_exception
  en:
    term: throw (exception)
    def: >
      Another term for [raising](#raise_exception) an exception.
  es:
    term: FIXME
    def: >
      FIXME

- key: tightly_coupled
  ref:
  - loosely_coupled
  en:
    term: tightly coupled
    def: >
      Components in a software system are said to be tightly coupled if they
      depend on each other's internals, so that if one is altered then others
      have to be altered as well.
  es:
    term: FIXME
    def: >
      FIXME

- key: timestamp
  en:
    term: timestamp
    def: >
      A digital identifier showing the time at which something was created or
      accessed. Timestamps should use [ISO date format](#iso_date_format) for
      portability.
  es:
    term: FIXME
    def: >
      FIXME

- key: toctou
  en:
    term: Time of check/time of use
    def: >
      A [race condition](#race_condition) in which a process checks the state of
      something and then operates on it, but some other process might alter that
      state between the check and the operation.
    acronym: ToCToU
  es:
    term: FIXME
    def: >
      FIXME

- key: token
  en:
    term: token
    def: >
      An indivisible unit of text for a parser, such as a variable name or a
      number. Exactly what constitutes a token depends on the language.
  es:
    term: FIXME
    def: >
      FIXME

- key: topological_order
  en:
    term: topological order
    def: >
      Any ordering of the [nodes](#node) in a [graph](#graph) that respects the
      direction of its [edges](#edge), i.e., if there is an edge from node A to
      node B, A comes before B in the ordering. There may be many topological
      orderings of a particular graph.
  es:
    term: FIXME
    def: >
      FIXME

- key: transitive_closure
  en:
    term: transitive closure
    def: >
      The set of all [nodes](#node) in a [graph](#graph) that are reachable from
      a starting node, either directly or indirectly.
  es:
    term: FIXME
    def: >
      FIXME

- key: tree
  en:
    term: tree
    def: >
      A [graph](#graph) in which every node except the [root](#root_tree) has
      exactly one [parent](#parent_tree).
  es:
    term: FIXME
    def: >
      FIXME

- key: tuple
  en:
    term: tuple
    def: >
      A value that has a fixed number of parts, such as the three color
      components of a red-green-blue color specification.
  es:
    term: FIXME
    def: >
      FIXME

- key: turing_machine
  en:
    term: Turing Machine
    def: >
      A theoretical model of computation that manipulates symbols on an infinite
      tape according to a fixed table of rules. Any computation that can be
      expressed as an algorithm can be done by a Turing Machine.
  es:
    term: FIXME
    def: >
      FIXME

- key: two_hard_problems
  en:
    term: two hard problems in computer science
    def: >
      Refers to a quote by Phil Karlton: "There are only two hard problems in
      computer science—cache invalidation and naming things." Many variations
      add a third problem as a joke, such as [off-by-one errors](#off_by_one_error).
  es:
    term: FIXME
    def: >
      FIXME

- key: type_declaration
  en:
    term: type declaration
    def: >
      A statement in a program that a variable or value has a particular data
      type. Languages like Java require type declarations for all variables;
      they are optional in TypeScript and Python, and not allowed in pure
      JavaScript.
  es:
    term: FIXME
    def: >
      FIXME

- key: unicode
  en:
    term: Unicode
    def: >
      A standard that defines numeric codes for many thousands of characters and
      symbols. Unicode does not define how those numbers are stored; that is
      done by standards like [UTF-8](#utf_8).
  es:
    term: FIXME
    def: >
      FIXME

- key: url
  en:
    term: Uniform Resource Locator
    def: >
      A unique address on the World-Wide Web. URLs originally identified web
      pages, but may also represent datasets or database queries, particularly
      if they include a [query string](#query_string).
    acronym: URL
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: unit_test
  en:
    term: unit test
    def: >
      A test that exercises one function or feature of a piece of software and
      produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).
  es:
    term: FIXME
    def: >
      FIXME

- key: utf_8
  en:
    term: UTF-8
    def: >
      A way to store the numeric codes representing [Unicode](#unicode)
      characters in memory that is [backward-compatible](#backward_compatible)
      with the older [ASCII](#ascii) standard.
  es:
    term: FIXME
    def: >
      FIXME

- key: vector
  en:
    term: vector
    def: >
      A sequence of values, usually of [homogeneous](#homogeneous) type.
  es:
    term: FIXME
    def: >
      FIXME

- key: version_control_system
  en:
    term: version control system
    def: >
      A system for managing changes made to software during its development.
  es:
    term: FIXME
    def: >
      FIXME

- key: virtual_machine
  en:
    term: virtual machine
    def: >
      A program that pretends to be a computer. This may seem a bit redundant,
      but VMs are quick to create and start up, and changes made inside the
      virtual machine are contained within that VM so we can install new
      [packages](#package) or run a completely different operating system
      without affecting the underlying computer.
  es:
    term: FIXME
    def: >
      FIXME

- key: visitor_pattern
  ref:
  - iterator_pattern
  en:
    term: Visitor pattern
    def: >
      A [design pattern](#design_pattern) in which the operation to be done is
      taken to each element of a data structure in turn. It is usually
      implemented by having a generator "visitor" that knows how to reach the
      structure's elements, which is given a function or method to call for each
      in turn, and that carries out the specific operation.
  es:
    term: FIXME
    def: >
      FIXME

- key: walk_tree
  en:
    term: walk (a tree)
    def: >
      To visit each [node](#node) in a [tree](#tree) in some order, typically
      [depth-first](#depth_first) or [breadth-first](#breadth_first).
  es:
    term: FIXME
    def: >
      FIXME

- key: watchpoint
  ref:
  - breakpoint
  en:
    term: watchpoint
    def: >
      An instruction for a debugger telling it to suspect execution whenever the
      value of a variable (or more generally an expression) changes.
  es:
    term: FIXME
    def: >
      FIXME

- key: well_formed
  en:
    term: well formed
    def: >
      A piece of text that obeys the rules of a formal grammar is said to be
      well formed.
  es:
    term: FIXME
    def: >
      FIXME

- key: word_memory
  en:
    term: word (of memory)
    def: >
      The unit of memory that a particular processor most naturally works with.
      While a byte is a fixed size (8 bits), a word may be 16, 32, or 64 bits
      long depending on the processor.
  es:
    term: FIXME
    def: >
      FIXME

- key: xml
  en:
    term: XML
    def: >
      A set of rules for defining [HTML](#html)-like tags and using them to
      format documents (typically data). XML was popular in the early 2000s, but
      its complexity led many programmers to adopt [JSON](#json), instead.
  es:
    term: FIXME
    def: >
      FIXME

- key: yaml
  en:
    term: YAML
    def: >
      Short for "YAML Ain't Markup Language", a way to represent nested data
      using indentation rather than the parentheses and commas of [JSON](#json).
      YAML is often used in configuration files and to define
      [parameters](#parameter) for various flavors of [Markdown](#markdown)
      documents.
  es:
    term: FIXME
    def: >
      FIXME

- key: z_buffering
  en:
    term: z-buffering
    def: >
      A drawing method that keeps track of the depth of what lies "under" each
      pixel so that it displays whatever is nearest to the observer.
  es:
    term: FIXME
    def: >
      FIXME
